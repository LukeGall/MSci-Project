package demos.BookSearch;

/**
 * Generated by StMungo
 * Thu Mar 17 15:58:57 GMT 2022
 */
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.ServerSocket;
import java.net.UnknownHostException;
import java.io.BufferedReader;

@Typestate("LProtocol")
public class LRole{
    private BufferedReader socketUIn = null;
    private PrintWriter socketUOut = null;
    private BufferedReader socketSIn = null;
    private PrintWriter socketSOut = null;
    public LRole() {
        // Connect to the other participants in the protocol
        try {
            // Create the sockets
            Socket socketU = new Socket("localhost", 20000);
            Socket socketS = new Socket("localhost", 20001);
            socketUIn = new BufferedReader(new InputStreamReader(socketU.getInputStream()));
            socketUOut = new PrintWriter(socketU.getOutputStream(), true);
            socketSIn = new BufferedReader(new InputStreamReader(socketS.getInputStream()));
            socketSOut = new PrintWriter(socketS.getOutputStream(), true);
        } catch(UnknownHostException e) {
            System.out.println("Unable to connect to the remote host");
            System.exit(-1);
        } catch (IOException e) {
            System.out.println("Input/output error");
            System.exit(-1);
        }
    }

    public LChoice1 receive_LChoice1LabelFromU() {
        String stringLabelLChoice1 = "";
        try {
            stringLabelLChoice1 = this.socketUIn.readLine();
        } catch(IOException e) {
            System.out.println("Input/Outpur error, unable to get label. " + e.getMessage());
            System.exit(-1);
        }
        switch(stringLabelLChoice1) {
            case "ADDBOOK":
                return LChoice1.ADDBOOK;
            case "SKIPBOOK":
            default:
                return LChoice1.SKIPBOOK;
        }
    }

    public Book receive_addBookBookFromU() {
        String line = "";
        try {
            line = this.socketUIn.readLine();
        } catch(IOException e) {
            System.out.println("Input/Outpur error. " + e.getMessage());
            System.exit(-1);
        }
        // Perform a cast of line to the appropriate type and then return it
        return Book.parseBook(line);
    }

    public void receive_skipBookFromU() {
        // Nothing to be received
    }
    public LChoice2 receive_LChoice2LabelFromU() {
        String stringLabelLChoice2 = "";
        try {
            stringLabelLChoice2 = this.socketUIn.readLine();
        } catch(IOException e) {
            System.out.println("Input/Outpur error, unable to get label. " + e.getMessage());
            System.exit(-1);
        }
        switch(stringLabelLChoice2) {
            case "MOREBOOKS":
                return LChoice2.MOREBOOKS;
            case "END":
            default:
                return LChoice2.END;
        }
    }

    public String receive_moreBooksStringFromU() {
        String line = "";
        try {
            line = this.socketUIn.readLine();
        } catch(IOException e) {
            System.out.println("Input/Outpur error. " + e.getMessage());
            System.exit(-1);
        }
        return line;
    }

    public void receive_endFromU() {
        // Nothing to be received
    }
}
