package demos.fibonacci.scribble;

/**
 * Generated by StMungo
 * Wed Apr 08 17:27:31 BST 2020
 */

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.UnknownHostException;

@Typestate("BProtocol")
public class BRole {
    private BufferedReader socketAIn = null;
    private PrintWriter socketAOut = null;

    public BRole() {
        // Connect to the other participants in the protocol
        try {
            // Create the sockets
            Socket socketA = new Socket("localhost", 20000);
            socketAIn = new BufferedReader(new InputStreamReader(socketA.getInputStream()));
            socketAOut = new PrintWriter(socketA.getOutputStream(), true);
        } catch (UnknownHostException e) {
            System.out.println("Unable to connect to the remote host");
            System.exit(-1);
        } catch (IOException e) {
            System.out.println("Input/output error");
            System.exit(-1);
        }
    }

    public Choice1 receive_Choice1LabelFromA() {
        String stringLabelChoice1 = "";
        try {
            stringLabelChoice1 = this.socketAIn.readLine();
        } catch (IOException e) {
            System.out.println("Input/Outpur error, unable to get label. " + e.getMessage());
            System.exit(-1);
        }
        switch (stringLabelChoice1) {
            case "FIBONACCI":
                return Choice1.FIBONACCI;
            case "END":
            default:
                return Choice1.END;
        }
    }

    public Long receive_fibonacciLongFromA() {
        String line = "";
        try {
            line = this.socketAIn.readLine();
        } catch (IOException e) {
            System.out.println("Input/Outpur error. " + e.getMessage());
            System.exit(-1);
        }
        // Perform a cast of line to the appropriate type and then return it
        return Long.parseLong(line);
    }

    public void send_fibonacciLongToA(Long payload) {
        this.socketAOut.println(payload);
    }

    public void receive_endFromA() {
        // Nothing to be received
    }
}
