module demos.SMTP.SMTP;

type <java> "java.lang.String" from "rt.jar" as String;

global protocol SMTP(role S, role C)
{
	_220(String) from S to C;
	choice at C
	{
		ehlo(String) from C to S;
		rec X
		{
			choice at S
			{
				_250dash(String) from S to C;
				continue X;
			}
			or
			{
				_250(String) from S to C;
				choice at C
				{
					// Do TLS handshake: level below the application level protocol (like normal TCP handshake)
					starttls(String) from C to S;
					_220(String) from S to C;
					choice at C
					{
						ehlo(String) from C to S;
						rec X1
						{
							choice at S
							{
								_250dash(String) from S to C;
								continue X1;
							}
							or
							{
								_250(String) from S to C;
								rec Y
								{
									choice at C
									{
										auth(String) from C to S;
										choice at S
										{
											_235(String) from S to C;
											rec Z1
											{
												choice at C
												{
													mail(String) from C to S; //mail from:<a@b.com>
													choice at S
													{
														_501(String) from S to C;
														continue Z1;
													}
													or
													{
														_250(String) from S to C;
														rec Z2
														{
															choice at C
															{
																rcpt(String) from C to S; //rcpt to:<c@d.com>
																choice at S
																{
																	_250(String) from S to C;
																	continue Z2;
																}
															}
															or
															{
																data(String) from C to S;
																_354(String) from S to C;
																//too from C to S; //to:<you>
																//froom from C to S; //from:<me>
																rec Z3
																{
																	choice at C
																	{
																		dataline(String) from C to S;
																		continue Z3;
																	}
																	or
																	{
																		subject(String) from C to S; //subject:<my subject>
																		continue Z3;
																	}
																	or
																	{
																		atad(String) from C to S; // CRLF.CRLF
																		_250(String) from S to C;
																		continue Z1;
																	}
																}	
															}
														}
													}
												}
												or
												{
													quit(String) from C to S;
												}
											}
										}
										or
										{
											_535(String) from S to C;
											continue Y;
										}
										//.. 501 Invalid base64 data 
									}
									or
									{
										quit(String) from C to S;
									}
								}
							}
						}
					}
					or
					{
						quit(String) from C to S;
					}
				}
				or
				{
					quit(String) from C to S;
				}
			}
		}
	}
	or
	{
		quit(String) from C to S;
	}
}
