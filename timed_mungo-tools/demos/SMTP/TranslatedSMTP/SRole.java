package demos.SMTP.TranslatedSMTP;

/**
 * Generated by StMungo
 * Thu Apr 23 18:59:36 BST 2020
 */
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;

@Typestate("SProtocol")
public class SRole{
    private BufferedReader socketCIn = null;
    private PrintWriter socketCOut = null;
    public SRole() {
        // Bind the sockets
        ServerSocket serverC = null;
        // Connecting to the server
        try {
            // Create the sockets
            serverC = new ServerSocket(20000);
        } catch(IOException e) {
            System.out.println("Unable to listen on ports");
            System.exit(-1);
        }

        // Accept a client connection
        Socket socketC = null;
        try {
            System.out.println("Accepting...");
            socketC = serverC.accept();
            System.out.println("C accepted");
        }
        catch (IOException e) {
            System.out.println("Accept failed");
            System.exit(-1);
        }
        // Create the read and write streams
        try {
            socketCIn = new BufferedReader(new InputStreamReader(socketC.getInputStream()));
            socketCOut = new PrintWriter(socketC.getOutputStream(), true);
        }
        catch (IOException e) {
            System.out.println("Read failed");
            System.exit(-1);
        }

    }

    public void send_220StringToC(String payload0) {
        this.socketCOut.println(payload0);
    }

    public SChoice1 receive_SChoice1LabelFromC() {
        String stringLabelSChoice1 = "";
        try {
            stringLabelSChoice1 = this.socketCIn.readLine();
        } catch(IOException e) {
            System.out.println("Input/Outpur error, unable to get label. " + e.getMessage());
            System.exit(-1);
        }
        switch(stringLabelSChoice1) {
            case "EHLO":
                return SChoice1.EHLO;
            case "QUIT":
            default:
                return SChoice1.QUIT;
        }
    }

    public String receive_ehloStringFromC() {
        String line = "";
        try {
            line = this.socketCIn.readLine();
        } catch(IOException e) {
            System.out.println("Input/Outpur error. " + e.getMessage());
            System.exit(-1);
        }
        return line;
    }

    public void send_250DASHToC() {
        this.socketCOut.println("_250DASH");
    }

    public void send_250ToC() {
        this.socketCOut.println("_250");
    }

    public void send_250dashStringToC(String payload0) {
        this.socketCOut.println(payload0);
    }

    public void send_250StringToC(String payload0) {
        this.socketCOut.println(payload0);
    }

    public SChoice2 receive_SChoice2LabelFromC() {
        String stringLabelSChoice2 = "";
        try {
            stringLabelSChoice2 = this.socketCIn.readLine();
        } catch(IOException e) {
            System.out.println("Input/Outpur error, unable to get label. " + e.getMessage());
            System.exit(-1);
        }
        switch(stringLabelSChoice2) {
            case "STARTTLS":
                return SChoice2.STARTTLS;
            case "QUIT":
            default:
                return SChoice2.QUIT;
        }
    }

    public String receive_starttlsStringFromC() {
        String line = "";
        try {
            line = this.socketCIn.readLine();
        } catch(IOException e) {
            System.out.println("Input/Outpur error. " + e.getMessage());
            System.exit(-1);
        }
        return line;
    }

    public SChoice3 receive_SChoice3LabelFromC() {
        String stringLabelSChoice3 = "";
        try {
            stringLabelSChoice3 = this.socketCIn.readLine();
        } catch(IOException e) {
            System.out.println("Input/Outpur error, unable to get label. " + e.getMessage());
            System.exit(-1);
        }
        switch(stringLabelSChoice3) {
            case "AUTH":
                return SChoice3.AUTH;
            case "QUIT":
            default:
                return SChoice3.QUIT;
        }
    }

    public String receive_authStringFromC() {
        String line = "";
        try {
            line = this.socketCIn.readLine();
        } catch(IOException e) {
            System.out.println("Input/Outpur error. " + e.getMessage());
            System.exit(-1);
        }
        return line;
    }

    public void send_235ToC() {
        this.socketCOut.println("_235");
    }

    public void send_535ToC() {
        this.socketCOut.println("_535");
    }

    public void send_235StringToC(String payload0) {
        this.socketCOut.println(payload0);
    }

    public SChoice4 receive_SChoice4LabelFromC() {
        String stringLabelSChoice4 = "";
        try {
            stringLabelSChoice4 = this.socketCIn.readLine();
        } catch(IOException e) {
            System.out.println("Input/Outpur error, unable to get label. " + e.getMessage());
            System.exit(-1);
        }
        switch(stringLabelSChoice4) {
            case "MAIL":
                return SChoice4.MAIL;
            case "QUIT":
            default:
                return SChoice4.QUIT;
        }
    }

    public String receive_mailStringFromC() {
        String line = "";
        try {
            line = this.socketCIn.readLine();
        } catch(IOException e) {
            System.out.println("Input/Outpur error. " + e.getMessage());
            System.exit(-1);
        }
        return line;
    }

    public void send_501ToC() {
        this.socketCOut.println("_501");
    }

    public void send_501StringToC(String payload0) {
        this.socketCOut.println(payload0);
    }

    public SChoice5 receive_SChoice5LabelFromC() {
        String stringLabelSChoice5 = "";
        try {
            stringLabelSChoice5 = this.socketCIn.readLine();
        } catch(IOException e) {
            System.out.println("Input/Outpur error, unable to get label. " + e.getMessage());
            System.exit(-1);
        }
        switch(stringLabelSChoice5) {
            case "RCPT":
                return SChoice5.RCPT;
            case "DATA":
            default:
                return SChoice5.DATA;
        }
    }

    public String receive_rcptStringFromC() {
        String line = "";
        try {
            line = this.socketCIn.readLine();
        } catch(IOException e) {
            System.out.println("Input/Outpur error. " + e.getMessage());
            System.exit(-1);
        }
        return line;
    }

    public String receive_dataStringFromC() {
        String line = "";
        try {
            line = this.socketCIn.readLine();
        } catch(IOException e) {
            System.out.println("Input/Outpur error. " + e.getMessage());
            System.exit(-1);
        }
        return line;
    }

    public void send_354StringToC(String payload0) {
        this.socketCOut.println(payload0);
    }

    public SChoice6 receive_SChoice6LabelFromC() {
        String stringLabelSChoice6 = "";
        try {
            stringLabelSChoice6 = this.socketCIn.readLine();
        } catch(IOException e) {
            System.out.println("Input/Outpur error, unable to get label. " + e.getMessage());
            System.exit(-1);
        }
        switch(stringLabelSChoice6) {
            case "DATALINE":
                return SChoice6.DATALINE;
            case "SUBJECT":
                return SChoice6.SUBJECT;
            case "ATAD":
            default:
                return SChoice6.ATAD;
        }
    }

    public String receive_datalineStringFromC() {
        String line = "";
        try {
            line = this.socketCIn.readLine();
        } catch(IOException e) {
            System.out.println("Input/Outpur error. " + e.getMessage());
            System.exit(-1);
        }
        return line;
    }

    public String receive_subjectStringFromC() {
        String line = "";
        try {
            line = this.socketCIn.readLine();
        } catch(IOException e) {
            System.out.println("Input/Outpur error. " + e.getMessage());
            System.exit(-1);
        }
        return line;
    }

    public String receive_atadStringFromC() {
        String line = "";
        try {
            line = this.socketCIn.readLine();
        } catch(IOException e) {
            System.out.println("Input/Outpur error. " + e.getMessage());
            System.exit(-1);
        }
        return line;
    }

    public String receive_quitStringFromC() {
        String line = "";
        try {
            line = this.socketCIn.readLine();
        } catch(IOException e) {
            System.out.println("Input/Outpur error. " + e.getMessage());
            System.exit(-1);
        }
        return line;
    }

    public void send_535StringToC(String payload0) {
        this.socketCOut.println(payload0);
    }

}
