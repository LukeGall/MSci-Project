/* The following code was generated by JFlex 1.6.1 */

package org.extendj.scanner;

import beaver.Symbol;
import beaver.Scanner;
import org.extendj.parser.JavaParser.Terminals;
import java.io.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/home/luke/Level-5-Project/Mungo/updated_mungo-tools/mungo/build/tmp/generateScanner/OriginalScanner.flex</tt>
 */
public final class OriginalScanner extends Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\105\1\3\1\1\1\102\1\4\1\2\14\105\1\106\1\105\4\0"+
    "\1\3\1\60\1\21\1\0\1\104\1\70\1\64\1\20\1\71\1\72"+
    "\1\6\1\66\1\100\1\14\1\12\1\5\4\24\4\23\2\11\1\63"+
    "\1\77\1\57\1\55\1\56\1\62\1\101\3\7\1\17\1\15\1\16"+
    "\5\104\1\7\3\104\1\13\7\104\1\7\2\104\1\75\1\22\1\76"+
    "\1\67\1\10\1\0\1\25\1\32\1\33\1\44\1\27\1\45\1\47"+
    "\1\41\1\42\1\104\1\37\1\35\1\50\1\36\1\34\1\51\1\104"+
    "\1\30\1\26\1\31\1\43\1\52\1\53\1\46\1\40\1\54\1\73"+
    "\1\65\1\74\1\61\6\105\1\103\32\105\2\0\4\104\4\0\1\104"+
    "\2\0\1\105\7\0\1\104\4\0\1\104\5\0\27\104\1\0\37\104"+
    "\1\0\u01ca\104\4\0\14\104\16\0\5\104\7\0\1\104\1\0\1\104"+
    "\21\0\160\105\5\104\1\0\2\104\2\0\4\104\10\0\1\104\1\0"+
    "\3\104\1\0\1\104\1\0\24\104\1\0\123\104\1\0\213\104\1\0"+
    "\5\105\2\0\236\104\11\0\46\104\2\0\1\104\7\0\47\104\7\0"+
    "\1\104\1\0\55\105\1\0\1\105\1\0\2\105\1\0\2\105\1\0"+
    "\1\105\10\0\33\104\5\0\3\104\15\0\5\105\6\0\1\104\4\0"+
    "\13\105\5\0\53\104\37\105\4\0\2\104\1\105\143\104\1\0\1\104"+
    "\10\105\1\0\6\105\2\104\2\105\1\0\4\105\2\104\12\105\3\104"+
    "\2\0\1\104\17\0\1\105\1\104\1\105\36\104\33\105\2\0\131\104"+
    "\13\105\1\104\16\0\12\105\41\104\11\105\2\104\4\0\1\104\5\0"+
    "\26\104\4\105\1\104\11\105\1\104\3\105\1\104\5\105\22\0\31\104"+
    "\3\105\104\0\1\104\1\0\13\104\67\0\33\105\1\0\4\105\66\104"+
    "\3\105\1\104\22\105\1\104\7\105\12\104\2\105\2\0\12\105\1\0"+
    "\7\104\1\0\7\104\1\0\3\105\1\0\10\104\2\0\2\104\2\0"+
    "\26\104\1\0\7\104\1\0\1\104\3\0\4\104\2\0\1\105\1\104"+
    "\7\105\2\0\2\105\2\0\3\105\1\104\10\0\1\105\4\0\2\104"+
    "\1\0\3\104\2\105\2\0\12\105\4\104\7\0\1\104\5\0\3\105"+
    "\1\0\6\104\4\0\2\104\2\0\26\104\1\0\7\104\1\0\2\104"+
    "\1\0\2\104\1\0\2\104\2\0\1\105\1\0\5\105\4\0\2\105"+
    "\2\0\3\105\3\0\1\105\7\0\4\104\1\0\1\104\7\0\14\105"+
    "\3\104\1\105\13\0\3\105\1\0\11\104\1\0\3\104\1\0\26\104"+
    "\1\0\7\104\1\0\2\104\1\0\5\104\2\0\1\105\1\104\10\105"+
    "\1\0\3\105\1\0\3\105\2\0\1\104\17\0\2\104\2\105\2\0"+
    "\12\105\1\0\1\104\17\0\3\105\1\0\10\104\2\0\2\104\2\0"+
    "\26\104\1\0\7\104\1\0\2\104\1\0\5\104\2\0\1\105\1\104"+
    "\7\105\2\0\2\105\2\0\3\105\10\0\2\105\4\0\2\104\1\0"+
    "\3\104\2\105\2\0\12\105\1\0\1\104\20\0\1\105\1\104\1\0"+
    "\6\104\3\0\3\104\1\0\4\104\3\0\2\104\1\0\1\104\1\0"+
    "\2\104\3\0\2\104\3\0\3\104\3\0\14\104\4\0\5\105\3\0"+
    "\3\105\1\0\4\105\2\0\1\104\6\0\1\105\16\0\12\105\11\0"+
    "\1\104\7\0\3\105\1\0\10\104\1\0\3\104\1\0\27\104\1\0"+
    "\12\104\1\0\5\104\3\0\1\104\7\105\1\0\3\105\1\0\4\105"+
    "\7\0\2\105\1\0\2\104\6\0\2\104\2\105\2\0\12\105\22\0"+
    "\2\105\1\0\10\104\1\0\3\104\1\0\27\104\1\0\12\104\1\0"+
    "\5\104\2\0\1\105\1\104\7\105\1\0\3\105\1\0\4\105\7\0"+
    "\2\105\7\0\1\104\1\0\2\104\2\105\2\0\12\105\1\0\2\104"+
    "\17\0\2\105\1\0\10\104\1\0\3\104\1\0\51\104\2\0\1\104"+
    "\7\105\1\0\3\105\1\0\4\105\1\104\10\0\1\105\10\0\2\104"+
    "\2\105\2\0\12\105\12\0\6\104\2\0\2\105\1\0\22\104\3\0"+
    "\30\104\1\0\11\104\1\0\1\104\2\0\7\104\3\0\1\105\4\0"+
    "\6\105\1\0\1\105\1\0\10\105\22\0\2\105\15\0\60\104\1\105"+
    "\2\104\7\105\4\0\10\104\10\105\1\0\12\105\47\0\2\104\1\0"+
    "\1\104\2\0\2\104\1\0\1\104\2\0\1\104\6\0\4\104\1\0"+
    "\7\104\1\0\3\104\1\0\1\104\1\0\1\104\2\0\2\104\1\0"+
    "\4\104\1\105\2\104\6\105\1\0\2\105\1\104\2\0\5\104\1\0"+
    "\1\104\1\0\6\105\2\0\12\105\2\0\4\104\40\0\1\104\27\0"+
    "\2\105\6\0\12\105\13\0\1\105\1\0\1\105\1\0\1\105\4\0"+
    "\2\105\10\104\1\0\44\104\4\0\24\105\1\0\2\105\5\104\13\105"+
    "\1\0\44\105\11\0\1\105\71\0\53\104\24\105\1\104\12\105\6\0"+
    "\6\104\4\105\4\104\3\105\1\104\3\105\2\104\7\105\3\104\4\105"+
    "\15\104\14\105\1\104\17\105\2\0\46\104\1\0\1\104\5\0\1\104"+
    "\2\0\53\104\1\0\u014d\104\1\0\4\104\2\0\7\104\1\0\1\104"+
    "\1\0\4\104\2\0\51\104\1\0\4\104\2\0\41\104\1\0\4\104"+
    "\2\0\7\104\1\0\1\104\1\0\4\104\2\0\17\104\1\0\71\104"+
    "\1\0\4\104\2\0\103\104\2\0\3\105\40\0\20\104\20\0\125\104"+
    "\14\0\u026c\104\2\0\21\104\1\0\32\104\5\0\113\104\3\0\3\104"+
    "\17\0\15\104\1\0\4\104\3\105\13\0\22\104\3\105\13\0\22\104"+
    "\2\105\14\0\15\104\1\0\3\104\1\0\2\105\14\0\64\104\40\105"+
    "\3\0\1\104\3\0\2\104\1\105\2\0\12\105\41\0\3\105\2\0"+
    "\12\105\6\0\130\104\10\0\51\104\1\105\1\104\5\0\106\104\12\0"+
    "\35\104\3\0\14\105\4\0\14\105\12\0\12\105\36\104\2\0\5\104"+
    "\13\0\54\104\4\0\21\105\7\104\2\105\6\0\12\105\46\0\27\104"+
    "\5\105\4\0\65\104\12\105\1\0\35\105\2\0\13\105\6\0\12\105"+
    "\15\0\1\104\130\0\5\105\57\104\21\105\7\104\4\0\12\105\21\0"+
    "\11\105\14\0\3\105\36\104\15\105\2\104\12\105\54\104\16\105\14\0"+
    "\44\104\24\105\10\0\12\105\3\0\3\104\12\105\44\104\122\0\3\105"+
    "\1\0\25\105\4\104\1\105\4\104\3\105\2\104\11\0\300\104\47\105"+
    "\25\0\4\105\u0116\104\2\0\6\104\2\0\46\104\2\0\6\104\2\0"+
    "\10\104\1\0\1\104\1\0\1\104\1\0\1\104\1\0\37\104\2\0"+
    "\65\104\1\0\7\104\1\0\1\104\3\0\3\104\1\0\7\104\3\0"+
    "\4\104\2\0\6\104\4\0\15\104\5\0\3\104\1\0\7\104\16\0"+
    "\5\105\30\0\1\102\1\102\5\105\20\0\2\104\23\0\1\104\13\0"+
    "\5\105\5\0\6\105\1\0\1\104\15\0\1\104\20\0\15\104\3\0"+
    "\33\104\25\0\15\105\4\0\1\105\3\0\14\105\21\0\1\104\4\0"+
    "\1\104\2\0\12\104\1\0\1\104\3\0\5\104\6\0\1\104\1\0"+
    "\1\104\1\0\1\104\1\0\4\104\1\0\13\104\2\0\4\104\5\0"+
    "\5\104\4\0\1\104\21\0\51\104\u0a77\0\57\104\1\0\57\104\1\0"+
    "\205\104\6\0\4\104\3\105\2\104\14\0\46\104\1\0\1\104\5\0"+
    "\1\104\2\0\70\104\7\0\1\104\17\0\1\105\27\104\11\0\7\104"+
    "\1\0\7\104\1\0\7\104\1\0\7\104\1\0\7\104\1\0\7\104"+
    "\1\0\7\104\1\0\7\104\1\0\40\105\57\0\1\104\u01d5\0\3\104"+
    "\31\0\11\104\6\105\1\0\5\104\2\0\5\104\4\0\126\104\2\0"+
    "\2\105\2\0\3\104\1\0\132\104\1\0\4\104\5\0\51\104\3\0"+
    "\136\104\21\0\33\104\65\0\20\104\u0200\0\u19b6\104\112\0\u51cd\104\63\0"+
    "\u048d\104\103\0\56\104\2\0\u010d\104\3\0\20\104\12\105\2\104\24\0"+
    "\57\104\1\105\4\0\12\105\1\0\31\104\7\0\1\105\120\104\2\105"+
    "\45\0\11\104\2\0\147\104\2\0\4\104\1\0\4\104\14\0\13\104"+
    "\115\0\12\104\1\105\3\104\1\105\4\104\1\105\27\104\5\105\20\0"+
    "\1\104\7\0\64\104\14\0\2\105\62\104\21\105\13\0\12\105\6\0"+
    "\22\105\6\104\3\0\1\104\4\0\12\105\34\104\10\105\2\0\27\104"+
    "\15\105\14\0\35\104\3\0\4\105\57\104\16\105\16\0\1\104\12\105"+
    "\46\0\51\104\16\105\11\0\3\104\1\105\10\104\2\105\2\0\12\105"+
    "\6\0\27\104\3\0\1\104\1\105\4\0\60\104\1\105\1\104\3\105"+
    "\2\104\2\105\5\104\2\105\1\104\1\105\1\104\30\0\3\104\2\0"+
    "\13\104\5\105\2\0\3\104\2\105\12\0\6\104\2\0\6\104\2\0"+
    "\6\104\11\0\7\104\1\0\7\104\221\0\43\104\10\105\1\0\2\105"+
    "\2\0\12\105\6\0\u2ba4\104\14\0\27\104\4\0\61\104\4\0\u0800\104"+
    "\u1900\0\u016e\104\2\0\152\104\46\0\7\104\14\0\5\104\5\0\1\104"+
    "\1\105\12\104\1\0\15\104\1\0\5\104\1\0\1\104\1\0\2\104"+
    "\1\0\2\104\1\0\154\104\41\0\u016b\104\22\0\100\104\2\0\66\104"+
    "\50\0\15\104\3\0\20\105\20\0\7\105\14\0\2\104\30\0\3\104"+
    "\31\0\1\104\6\0\5\104\1\0\207\104\2\0\1\105\4\0\1\104"+
    "\13\0\12\105\7\0\32\104\4\0\1\104\1\0\32\104\13\0\131\104"+
    "\3\0\6\104\2\0\6\104\2\0\6\104\2\0\3\104\3\0\2\104"+
    "\3\0\2\104\22\0\3\105\4\0\14\104\1\0\32\104\1\0\23\104"+
    "\1\0\2\104\1\0\17\104\2\0\16\104\42\0\173\104\105\0\65\104"+
    "\210\0\1\105\202\0\35\104\3\0\61\104\57\0\37\104\21\0\33\104"+
    "\65\0\36\104\2\0\44\104\4\0\10\104\1\0\5\104\52\0\236\104"+
    "\2\0\12\105\u0356\0\6\104\2\0\1\104\1\0\54\104\1\0\2\104"+
    "\3\0\1\104\2\0\27\104\252\0\26\104\12\0\32\104\106\0\70\104"+
    "\6\0\2\104\100\0\1\104\3\105\1\0\2\105\5\0\4\105\4\104"+
    "\1\0\3\104\1\0\33\104\4\0\3\105\4\0\1\105\40\0\35\104"+
    "\203\0\66\104\12\0\26\104\12\0\23\104\215\0\111\104\u03b7\0\3\105"+
    "\65\104\17\105\37\0\12\105\20\0\3\105\55\104\13\105\2\0\1\105"+
    "\22\0\31\104\7\0\12\105\6\0\3\105\44\104\16\105\1\0\12\105"+
    "\100\0\3\105\60\104\16\105\4\104\13\0\12\105\u04a6\0\53\104\15\105"+
    "\10\0\12\105\u0936\0\u036f\104\221\0\143\104\u0b9d\0\u042f\104\u33d1\0\u0239\104"+
    "\u04c7\0\105\104\13\0\1\104\56\105\20\0\4\105\15\104\u4060\0\2\104"+
    "\u2163\0\5\105\3\0\26\105\2\0\7\105\36\0\4\105\224\0\3\105"+
    "\u01bb\0\125\104\1\0\107\104\1\0\2\104\2\0\1\104\2\0\2\104"+
    "\2\0\4\104\1\0\14\104\1\0\1\104\1\0\7\104\1\0\101\104"+
    "\1\0\4\104\2\0\10\104\1\0\7\104\1\0\34\104\1\0\4\104"+
    "\1\0\5\104\1\0\1\104\3\0\7\104\1\0\u0154\104\2\0\31\104"+
    "\1\0\31\104\1\0\37\104\1\0\31\104\1\0\37\104\1\0\31\104"+
    "\1\0\37\104\1\0\31\104\1\0\37\104\1\0\31\104\1\0\10\104"+
    "\2\0\62\105\u1600\0\4\104\1\0\33\104\1\0\2\104\1\0\1\104"+
    "\2\0\1\104\1\0\12\104\1\0\4\104\1\0\1\104\1\0\1\104"+
    "\6\0\1\104\4\0\1\104\1\0\1\104\1\0\1\104\1\0\3\104"+
    "\1\0\2\104\1\0\1\104\2\0\1\104\1\0\1\104\1\0\1\104"+
    "\1\0\1\104\1\0\1\104\1\0\2\104\1\0\1\104\2\0\4\104"+
    "\1\0\7\104\1\0\4\104\1\0\4\104\1\0\1\104\1\0\12\104"+
    "\1\0\21\104\5\0\3\104\1\0\5\104\1\0\21\104\u1144\0\ua6d7\104"+
    "\51\0\u1035\104\13\0\336\104\u3fe2\0\u021e\104\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\105\36\0\140\105\200\0\360\105\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\1\1\11\20\5\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\2\41\1\42\1\1\1\2\1\0"+
    "\1\43\1\44\2\6\1\0\1\6\1\0\1\45\1\46"+
    "\1\47\1\0\2\50\1\0\33\5\1\51\2\5\1\52"+
    "\12\5\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\2\76\1\77\1\100\1\101"+
    "\1\102\1\103\2\0\2\6\1\0\1\104\1\105\12\72"+
    "\12\5\1\106\4\5\1\107\16\5\1\110\2\5\1\111"+
    "\4\5\1\112\12\5\1\113\1\114\1\115\1\76\2\0"+
    "\1\6\1\116\1\117\1\120\1\121\2\0\1\122\1\123"+
    "\1\124\1\125\1\126\10\5\1\127\1\130\4\5\1\131"+
    "\2\5\1\132\2\5\1\133\1\134\4\5\1\135\1\136"+
    "\1\5\1\137\10\5\1\140\5\5\1\141\1\5\1\142"+
    "\1\0\5\5\1\143\1\144\6\5\1\145\1\146\1\5"+
    "\1\147\1\5\1\150\7\5\1\151\1\152\5\5\1\153"+
    "\1\154\1\155\1\5\1\156\2\5\1\157\1\5\1\160"+
    "\3\5\1\161\2\5\1\162\2\5\1\163\2\5\1\164"+
    "\4\5\1\165\4\5\1\166\1\167\2\5\1\170\4\5"+
    "\1\171\1\172\1\173\1\5\1\174\1\5\1\175\1\176"+
    "\3\5\1\177\4\5\1\200\1\5\1\201\1\202\1\5"+
    "\1\203\1\5\1\204\1\5\1\205\1\206\1\5\1\207";

  private static int [] zzUnpackAction() {
    int [] result = new int[374];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\216\0\325\0\u011c\0\u0163\0\u01aa"+
    "\0\u01f1\0\u0238\0\u027f\0\u02c6\0\216\0\u030d\0\u0354\0\u039b"+
    "\0\u03e2\0\u0429\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c\0\u05d3"+
    "\0\u061a\0\u0661\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u07c4\0\u080b"+
    "\0\u0852\0\216\0\216\0\u0899\0\u08e0\0\u0927\0\u096e\0\u09b5"+
    "\0\u09fc\0\216\0\216\0\216\0\216\0\216\0\216\0\216"+
    "\0\216\0\216\0\216\0\u0a43\0\216\0\u0a8a\0\216\0\u0ad1"+
    "\0\u0b18\0\u0b5f\0\216\0\216\0\u0ba6\0\u0bed\0\u0c34\0\u0c7b"+
    "\0\u0cc2\0\216\0\216\0\216\0\u0d09\0\216\0\u0d50\0\u0d97"+
    "\0\u0dde\0\u0e25\0\u0e6c\0\u0eb3\0\u0efa\0\u0f41\0\u0f88\0\u0fcf"+
    "\0\u1016\0\u105d\0\u10a4\0\u10eb\0\u1132\0\u1179\0\u11c0\0\u1207"+
    "\0\u124e\0\u1295\0\u12dc\0\u1323\0\u136a\0\u13b1\0\u13f8\0\u143f"+
    "\0\u1486\0\u14cd\0\u1514\0\u01aa\0\u155b\0\u15a2\0\u15e9\0\u1630"+
    "\0\u1677\0\u16be\0\u1705\0\u174c\0\u1793\0\u17da\0\u1821\0\u1868"+
    "\0\u18af\0\216\0\216\0\u18f6\0\216\0\u193d\0\216\0\216"+
    "\0\216\0\216\0\216\0\216\0\216\0\216\0\216\0\216"+
    "\0\216\0\216\0\216\0\216\0\u1984\0\u19cb\0\216\0\216"+
    "\0\216\0\216\0\216\0\u1a12\0\u1a59\0\u1aa0\0\u1ae7\0\u1b2e"+
    "\0\216\0\216\0\u1b75\0\u1bbc\0\u1c03\0\u1c4a\0\u1c91\0\u1cd8"+
    "\0\u1d1f\0\u1d66\0\u1dad\0\u1df4\0\u1e3b\0\u1e82\0\u1ec9\0\u1f10"+
    "\0\u1f57\0\u1f9e\0\u1fe5\0\u202c\0\u2073\0\u20ba\0\u01aa\0\u2101"+
    "\0\u2148\0\u218f\0\u21d6\0\u01aa\0\u221d\0\u2264\0\u22ab\0\u22f2"+
    "\0\u2339\0\u2380\0\u23c7\0\u240e\0\u2455\0\u249c\0\u24e3\0\u252a"+
    "\0\u2571\0\u25b8\0\u01aa\0\u25ff\0\u2646\0\u268d\0\u26d4\0\u271b"+
    "\0\u2762\0\u27a9\0\u01aa\0\u27f0\0\u2837\0\u287e\0\u28c5\0\u290c"+
    "\0\u2953\0\u299a\0\u29e1\0\u2a28\0\u2a6f\0\216\0\u2ab6\0\216"+
    "\0\216\0\u2afd\0\u2b44\0\216\0\216\0\216\0\216\0\216"+
    "\0\u2b8b\0\u1c4a\0\216\0\216\0\216\0\216\0\216\0\u2bd2"+
    "\0\u2c19\0\u2c60\0\u2ca7\0\u2cee\0\u2d35\0\u2d7c\0\u2dc3\0\u01aa"+
    "\0\u01aa\0\u2e0a\0\u2e51\0\u2e98\0\u2edf\0\u01aa\0\u2f26\0\u2f6d"+
    "\0\u01aa\0\u2fb4\0\u2ffb\0\u01aa\0\u01aa\0\u3042\0\u3089\0\u30d0"+
    "\0\u3117\0\u01aa\0\u01aa\0\u315e\0\u01aa\0\u31a5\0\u31ec\0\u3233"+
    "\0\u327a\0\u32c1\0\u3308\0\u334f\0\u3396\0\u01aa\0\u33dd\0\u3424"+
    "\0\u346b\0\u34b2\0\u34f9\0\u01aa\0\u3540\0\216\0\u3587\0\u35ce"+
    "\0\u3615\0\u365c\0\u36a3\0\u36ea\0\u01aa\0\u01aa\0\u3731\0\u3778"+
    "\0\u37bf\0\u3806\0\u384d\0\u3894\0\u38db\0\u01aa\0\u3922\0\u01aa"+
    "\0\u3969\0\u01aa\0\u39b0\0\u39f7\0\u3a3e\0\u3a85\0\u3acc\0\u3b13"+
    "\0\u3b5a\0\u01aa\0\u3ba1\0\u3be8\0\u3c2f\0\u3c76\0\u3cbd\0\u3d04"+
    "\0\u01aa\0\216\0\u01aa\0\u3d4b\0\u01aa\0\u3d92\0\u3dd9\0\u01aa"+
    "\0\u3e20\0\u01aa\0\u3e67\0\u3eae\0\u3ef5\0\u01aa\0\u3f3c\0\u3f83"+
    "\0\u01aa\0\u3fca\0\u4011\0\u01aa\0\u4058\0\u409f\0\u01aa\0\u40e6"+
    "\0\u412d\0\u4174\0\u41bb\0\u01aa\0\u4202\0\u4249\0\u4290\0\u42d7"+
    "\0\u01aa\0\u01aa\0\u431e\0\u4365\0\u01aa\0\u43ac\0\u43f3\0\u443a"+
    "\0\u4481\0\u01aa\0\u01aa\0\u01aa\0\u44c8\0\u01aa\0\u450f\0\u01aa"+
    "\0\u01aa\0\u4556\0\u459d\0\u45e4\0\u01aa\0\u462b\0\u4672\0\u46b9"+
    "\0\u4700\0\u01aa\0\u4747\0\u01aa\0\u01aa\0\u478e\0\u01aa\0\u47d5"+
    "\0\u01aa\0\u481c\0\u01aa\0\u01aa\0\u4863\0\u01aa";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[374];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\2\4\1\6\1\7\2\10\1\11"+
    "\1\12\1\10\1\13\3\10\1\14\1\15\1\3\2\11"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\10"+
    "\1\25\1\26\3\10\1\27\1\10\1\30\1\31\1\10"+
    "\1\32\1\10\1\33\1\34\1\35\1\10\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\2\3\1\10\1\3\1\63\1\64"+
    "\1\65\1\66\16\64\1\67\1\70\64\64\110\0\1\4"+
    "\112\0\1\71\1\72\46\0\1\73\106\0\1\74\40\0"+
    "\3\10\1\0\1\10\1\0\3\10\3\0\32\10\26\0"+
    "\4\10\7\0\1\75\2\11\1\76\1\77\1\0\1\100"+
    "\2\75\3\0\2\11\1\75\1\0\1\100\2\0\2\75"+
    "\1\0\1\75\6\0\3\75\2\0\1\77\46\0\1\76"+
    "\1\101\10\0\2\76\76\0\1\102\40\0\1\103\1\104"+
    "\30\0\1\105\1\106\1\107\15\105\1\0\1\105\1\110"+
    "\64\105\7\0\3\10\1\0\1\10\1\0\3\10\3\0"+
    "\3\10\1\111\3\10\1\112\22\10\26\0\4\10\7\0"+
    "\3\10\1\0\1\10\1\0\3\10\3\0\6\10\1\113"+
    "\6\10\1\114\1\115\1\10\1\116\7\10\1\117\1\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\12\10\1\120\1\121\7\10\1\122\6\10\26\0"+
    "\4\10\7\0\3\10\1\0\1\10\1\0\3\10\3\0"+
    "\4\10\1\123\25\10\26\0\4\10\7\0\3\10\1\0"+
    "\1\10\1\0\3\10\3\0\3\10\1\124\1\10\1\125"+
    "\7\10\1\126\1\127\13\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\5\10\1\130\3\10"+
    "\1\131\3\10\1\132\14\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\2\10\1\133\6\10"+
    "\1\134\1\135\3\10\1\136\13\10\26\0\4\10\7\0"+
    "\3\10\1\0\1\10\1\0\3\10\3\0\11\10\1\137"+
    "\20\10\26\0\4\10\7\0\3\10\1\0\1\10\1\0"+
    "\3\10\3\0\2\10\1\140\1\10\1\141\13\10\1\142"+
    "\11\10\26\0\4\10\7\0\3\10\1\0\1\10\1\0"+
    "\3\10\3\0\13\10\1\143\6\10\1\144\2\10\1\145"+
    "\4\10\26\0\4\10\7\0\3\10\1\0\1\10\1\0"+
    "\3\10\3\0\4\10\1\146\4\10\1\147\20\10\26\0"+
    "\4\10\7\0\3\10\1\0\1\10\1\0\3\10\3\0"+
    "\2\10\1\150\6\10\1\151\1\152\4\10\1\153\12\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\11\10\1\154\20\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\2\10\1\155\2\10"+
    "\1\156\12\10\1\157\11\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\11\10\1\160\20\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\16\10\1\161\13\10\26\0\4\10\55\0\1\162"+
    "\106\0\1\163\1\164\105\0\1\165\1\0\1\166\104\0"+
    "\1\167\114\0\1\170\100\0\1\171\6\0\1\172\77\0"+
    "\1\173\7\0\1\174\76\0\1\175\10\0\1\176\75\0"+
    "\1\177\106\0\1\200\31\0\1\64\2\0\16\64\2\0"+
    "\64\64\1\0\1\65\105\0\1\201\2\0\1\201\1\0"+
    "\13\201\1\202\1\203\1\204\1\205\1\206\3\201\1\207"+
    "\1\210\1\211\3\201\1\212\6\201\1\213\34\201\2\0"+
    "\3\201\1\71\1\4\1\5\104\71\6\214\1\215\100\214"+
    "\7\0\3\75\1\76\1\77\1\0\3\75\3\0\3\75"+
    "\1\0\1\75\2\0\2\75\1\0\1\75\6\0\3\75"+
    "\2\0\1\77\44\0\3\76\1\0\1\77\1\0\1\216"+
    "\2\76\3\0\3\76\1\0\1\216\2\0\2\76\1\0"+
    "\1\76\6\0\3\76\2\0\1\77\45\0\2\217\2\0"+
    "\1\220\6\0\2\217\41\0\1\220\27\0\3\75\1\76"+
    "\1\77\1\220\3\75\3\0\3\75\1\0\1\75\2\0"+
    "\2\75\1\0\1\75\6\0\3\75\2\0\1\77\14\0"+
    "\1\220\32\0\1\221\114\0\1\222\67\0\1\106\105\0"+
    "\1\201\2\0\1\201\1\0\13\201\1\223\1\224\1\225"+
    "\1\226\1\227\3\201\1\230\1\231\1\232\3\201\1\233"+
    "\6\201\1\234\34\201\2\0\3\201\7\0\3\10\1\0"+
    "\1\10\1\0\3\10\3\0\3\10\1\235\26\10\26\0"+
    "\4\10\7\0\3\10\1\0\1\10\1\0\3\10\3\0"+
    "\3\10\1\236\26\10\26\0\4\10\7\0\3\10\1\0"+
    "\1\10\1\0\3\10\3\0\2\10\1\237\2\10\1\240"+
    "\24\10\26\0\4\10\7\0\3\10\1\0\1\10\1\0"+
    "\3\10\3\0\13\10\1\241\16\10\26\0\4\10\7\0"+
    "\3\10\1\0\1\10\1\0\3\10\3\0\11\10\1\242"+
    "\20\10\26\0\4\10\7\0\3\10\1\0\1\10\1\0"+
    "\3\10\3\0\26\10\1\243\3\10\26\0\4\10\7\0"+
    "\3\10\1\0\1\10\1\0\3\10\3\0\17\10\1\244"+
    "\12\10\26\0\4\10\7\0\3\10\1\0\1\10\1\0"+
    "\3\10\3\0\3\10\1\245\26\10\26\0\4\10\7\0"+
    "\3\10\1\0\1\10\1\0\3\10\3\0\20\10\1\246"+
    "\1\247\10\10\26\0\4\10\7\0\3\10\1\0\1\10"+
    "\1\0\3\10\3\0\6\10\1\250\23\10\26\0\4\10"+
    "\7\0\3\10\1\0\1\10\1\0\3\10\3\0\6\10"+
    "\1\251\23\10\26\0\4\10\7\0\3\10\1\0\1\10"+
    "\1\0\2\10\1\252\3\0\32\10\26\0\4\10\7\0"+
    "\3\10\1\0\1\10\1\0\3\10\3\0\2\10\1\253"+
    "\12\10\1\254\2\10\1\255\11\10\26\0\4\10\7\0"+
    "\3\10\1\0\1\10\1\0\3\10\3\0\26\10\1\256"+
    "\3\10\26\0\4\10\7\0\3\10\1\0\1\10\1\0"+
    "\3\10\3\0\5\10\1\257\11\10\1\260\12\10\26\0"+
    "\4\10\7\0\3\10\1\0\1\10\1\0\3\10\3\0"+
    "\4\10\1\261\25\10\26\0\4\10\7\0\3\10\1\0"+
    "\1\10\1\0\3\10\3\0\11\10\1\262\20\10\26\0"+
    "\4\10\7\0\3\10\1\0\1\10\1\0\3\10\3\0"+
    "\6\10\1\263\23\10\26\0\4\10\7\0\3\10\1\0"+
    "\1\10\1\0\3\10\3\0\3\10\1\264\2\10\1\265"+
    "\23\10\26\0\4\10\7\0\3\10\1\0\1\10\1\0"+
    "\3\10\3\0\13\10\1\266\16\10\26\0\4\10\7\0"+
    "\3\10\1\0\1\10\1\0\3\10\3\0\2\10\1\267"+
    "\27\10\26\0\4\10\7\0\3\10\1\0\1\10\1\0"+
    "\3\10\3\0\2\10\1\270\27\10\26\0\4\10\7\0"+
    "\3\10\1\0\1\10\1\0\3\10\3\0\13\10\1\271"+
    "\16\10\26\0\4\10\7\0\3\10\1\0\1\10\1\0"+
    "\3\10\3\0\6\10\1\272\23\10\26\0\4\10\7\0"+
    "\3\10\1\0\1\10\1\0\3\10\3\0\30\10\1\273"+
    "\1\10\26\0\4\10\7\0\3\10\1\0\1\10\1\0"+
    "\3\10\3\0\12\10\1\274\17\10\26\0\4\10\7\0"+
    "\3\10\1\0\1\10\1\0\3\10\3\0\3\10\1\275"+
    "\2\10\1\276\23\10\26\0\4\10\7\0\3\10\1\0"+
    "\1\10\1\0\3\10\3\0\26\10\1\277\3\10\26\0"+
    "\4\10\7\0\3\10\1\0\1\10\1\0\3\10\3\0"+
    "\22\10\1\300\7\10\26\0\4\10\7\0\3\10\1\0"+
    "\1\10\1\0\3\10\3\0\20\10\1\301\11\10\26\0"+
    "\4\10\7\0\3\10\1\0\1\10\1\0\3\10\3\0"+
    "\12\10\1\302\17\10\26\0\4\10\7\0\3\10\1\0"+
    "\1\10\1\0\3\10\3\0\5\10\1\303\24\10\26\0"+
    "\4\10\7\0\3\10\1\0\1\10\1\0\3\10\3\0"+
    "\11\10\1\304\20\10\26\0\4\10\7\0\3\10\1\0"+
    "\1\10\1\0\3\10\3\0\13\10\1\305\16\10\26\0"+
    "\4\10\7\0\3\10\1\0\1\10\1\0\3\10\3\0"+
    "\6\10\1\306\23\10\26\0\4\10\7\0\3\10\1\0"+
    "\1\10\1\0\3\10\3\0\10\10\1\307\21\10\26\0"+
    "\4\10\7\0\3\10\1\0\1\10\1\0\3\10\3\0"+
    "\11\10\1\310\5\10\1\311\12\10\26\0\4\10\7\0"+
    "\3\10\1\0\1\10\1\0\3\10\3\0\7\10\1\312"+
    "\22\10\26\0\4\10\7\0\3\10\1\0\1\10\1\0"+
    "\3\10\3\0\12\10\1\313\4\10\1\314\12\10\26\0"+
    "\4\10\7\0\3\10\1\0\1\10\1\0\3\10\3\0"+
    "\17\10\1\315\12\10\26\0\4\10\55\0\1\316\1\317"+
    "\105\0\1\320\54\0\2\321\105\0\2\205\62\0\6\214"+
    "\1\322\100\214\5\323\1\4\1\215\100\323\7\0\3\76"+
    "\1\0\1\77\1\220\1\216\2\76\3\0\3\76\1\0"+
    "\1\216\2\0\2\76\1\0\1\76\6\0\3\76\2\0"+
    "\1\77\14\0\1\220\30\0\2\217\4\0\2\324\3\0"+
    "\2\217\17\0\2\324\52\0\1\217\11\0\2\217\102\0"+
    "\1\325\106\0\1\326\106\0\1\327\106\0\1\330\2\0"+
    "\2\331\102\0\1\330\2\0\2\332\102\0\1\333\106\0"+
    "\1\334\106\0\1\335\106\0\1\336\106\0\1\337\75\0"+
    "\3\10\1\0\1\10\1\0\3\10\3\0\4\10\1\340"+
    "\25\10\26\0\4\10\7\0\3\10\1\0\1\10\1\0"+
    "\3\10\3\0\6\10\1\341\23\10\26\0\4\10\7\0"+
    "\3\10\1\0\1\10\1\0\3\10\3\0\6\10\1\342"+
    "\23\10\26\0\4\10\7\0\3\10\1\0\1\10\1\0"+
    "\3\10\3\0\17\10\1\343\12\10\26\0\4\10\7\0"+
    "\3\10\1\0\1\10\1\0\3\10\3\0\10\10\1\344"+
    "\21\10\26\0\4\10\7\0\3\10\1\0\1\10\1\0"+
    "\3\10\3\0\5\10\1\345\24\10\26\0\4\10\7\0"+
    "\3\10\1\0\1\10\1\0\3\10\3\0\4\10\1\346"+
    "\25\10\26\0\4\10\7\0\3\10\1\0\1\10\1\0"+
    "\3\10\3\0\6\10\1\347\23\10\26\0\4\10\7\0"+
    "\3\10\1\0\1\10\1\0\3\10\3\0\4\10\1\350"+
    "\25\10\26\0\4\10\7\0\3\10\1\0\1\10\1\0"+
    "\3\10\3\0\25\10\1\351\4\10\26\0\4\10\7\0"+
    "\3\10\1\0\1\10\1\0\3\10\3\0\4\10\1\352"+
    "\25\10\26\0\4\10\7\0\3\10\1\0\1\10\1\0"+
    "\3\10\3\0\20\10\1\353\11\10\26\0\4\10\7\0"+
    "\3\10\1\0\1\10\1\0\3\10\3\0\4\10\1\354"+
    "\25\10\26\0\4\10\7\0\3\10\1\0\1\10\1\0"+
    "\3\10\3\0\13\10\1\355\16\10\26\0\4\10\7\0"+
    "\3\10\1\0\1\10\1\0\3\10\3\0\4\10\1\356"+
    "\25\10\26\0\4\10\7\0\3\10\1\0\1\10\1\0"+
    "\3\10\3\0\4\10\1\357\25\10\26\0\4\10\7\0"+
    "\3\10\1\0\1\10\1\0\3\10\3\0\11\10\1\360"+
    "\20\10\26\0\4\10\7\0\3\10\1\0\1\10\1\0"+
    "\3\10\3\0\3\10\1\361\26\10\26\0\4\10\7\0"+
    "\3\10\1\0\1\10\1\0\3\10\3\0\2\10\1\362"+
    "\27\10\26\0\4\10\7\0\3\10\1\0\1\10\1\0"+
    "\3\10\3\0\12\10\1\363\17\10\26\0\4\10\7\0"+
    "\3\10\1\0\1\10\1\0\3\10\3\0\4\10\1\364"+
    "\25\10\26\0\4\10\7\0\3\10\1\0\1\10\1\0"+
    "\3\10\3\0\4\10\1\365\25\10\26\0\4\10\7\0"+
    "\3\10\1\0\1\10\1\0\3\10\3\0\10\10\1\366"+
    "\21\10\26\0\4\10\7\0\3\10\1\0\1\10\1\0"+
    "\3\10\3\0\3\10\1\367\2\10\1\370\23\10\26\0"+
    "\4\10\7\0\3\10\1\0\1\10\1\0\3\10\3\0"+
    "\3\10\1\371\26\10\26\0\4\10\7\0\3\10\1\0"+
    "\1\10\1\0\3\10\3\0\5\10\1\372\24\10\26\0"+
    "\4\10\7\0\3\10\1\0\1\10\1\0\3\10\3\0"+
    "\24\10\1\373\5\10\26\0\4\10\7\0\3\10\1\0"+
    "\1\10\1\0\3\10\3\0\17\10\1\374\12\10\26\0"+
    "\4\10\7\0\3\10\1\0\1\10\1\0\3\10\3\0"+
    "\12\10\1\375\17\10\26\0\4\10\7\0\3\10\1\0"+
    "\1\10\1\0\3\10\3\0\6\10\1\376\23\10\26\0"+
    "\4\10\7\0\3\10\1\0\1\10\1\0\3\10\3\0"+
    "\4\10\1\377\25\10\26\0\4\10\7\0\3\10\1\0"+
    "\1\10\1\0\3\10\3\0\11\10\1\u0100\1\u0101\17\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\2\10\1\u0102\27\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\7\10\1\u0103\22\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\3\10\1\255\26\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\2\10\1\u0104\27\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\2\10\1\u0105\27\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\11\10\1\u0106\20\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\14\10\1\u0107\15\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\6\10\1\u0108\23\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\27\10\1\u0109\2\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\12\10\1\u010a\17\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\2\10\1\u010b\27\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\21\10\1\u010c\10\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\12\10\1\u010d\17\10\26\0\4\10\55\0\1\u010e"+
    "\31\0\5\214\1\4\1\322\100\214\6\323\1\u010f\100\323"+
    "\20\0\1\330\75\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\5\10\1\u0110\24\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\5\10\1\u0111\24\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\17\10\1\u0112\12\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\10\10\1\u0113\21\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\16\10\1\u0114\13\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\6\10\1\u0115\23\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\5\10\1\u0116\24\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\10\10\1\u0117\21\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\13\10\1\u0118\16\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\5\10\1\u0119\24\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\12\10\1\u011a\17\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\3\10\1\u011b\26\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\3\10\1\u011c\26\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\30\10\1\u011d\1\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\14\10\1\u011e\15\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\4\10\1\u011f\25\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\16\10\1\u0120\13\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\6\10\1\u0106\23\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\17\10\1\u0121\12\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\3\10\1\u0122\26\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\27\10\1\u0123\2\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\2\10\1\u0124\27\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\5\10\1\u0125\24\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\5\10\1\u0126\24\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\4\10\1\u0127\25\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\20\10\1\u0128\11\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\12\10\1\u0129\17\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\6\10\1\u012a\23\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\12\10\1\u012b\17\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\2\10\1\u012c\27\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\4\10\1\u012d\25\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\2\10\1\u012e\27\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\17\10\1\u012f\12\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\6\10\1\u0130\23\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\4\10\1\u0131\25\10\26\0\4\10\5\323\1\u0132"+
    "\1\u010f\100\323\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\6\10\1\u0133\23\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\2\10\1\u0134\27\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\10\10\1\u0135\21\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\6\10\1\u0136\23\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\5\10\1\u0137\24\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\16\10\1\u0138\13\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\21\10\1\u0139\10\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\13\10\1\u013a\16\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\2\10\1\u013b\27\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\17\10\1\u013c\12\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\6\10\1\u013d\23\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\3\10\1\u013e\26\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\2\10\1\u013f\27\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\13\10\1\u0140\16\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\4\10\1\u0141\25\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\13\10\1\u0142\16\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\22\10\1\u0143\7\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\6\10\1\u0144\23\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\25\10\1\u0145\4\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\12\10\1\u0146\17\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\4\10\1\u0147\25\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\12\10\1\u0148\17\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\24\10\1\u0149\5\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\10\10\1\u014a\21\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\6\10\1\u014b\23\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\10\10\1\u014c\21\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\17\10\1\u014d\12\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\10\10\1\u014e\21\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\22\10\1\u014f\7\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\11\10\1\u0150\20\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\3\10\1\u0151\26\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\15\10\1\u0152\14\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\4\10\1\u0153\25\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\2\10\1\u0154\27\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\13\10\1\u0155\16\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\20\10\1\u0156\11\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\10\10\1\u0157\21\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\2\10\1\u0158\27\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\4\10\1\u0159\25\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\6\10\1\u015a\23\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\15\10\1\u015b\14\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\4\10\1\u015c\25\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\6\10\1\u015d\23\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\4\10\1\u015e\25\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\12\10\1\u015f\17\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\6\10\1\u0160\23\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\26\10\1\u0161\3\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\13\10\1\u0162\16\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\13\10\1\u0163\16\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\6\10\1\u0164\23\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\4\10\1\u0165\25\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\4\10\1\u0166\25\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\10\10\1\u0167\21\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\13\10\1\u0168\16\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\4\10\1\u0169\25\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\4\10\1\u016a\25\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\17\10\1\u016b\12\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\6\10\1\u016c\23\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\4\10\1\u016d\25\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\11\10\1\u016e\20\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\4\10\1\u016f\25\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\6\10\1\u0170\23\10"+
    "\26\0\4\10\7\0\3\10\1\0\1\10\1\0\3\10"+
    "\3\0\21\10\1\u0171\10\10\26\0\4\10\7\0\3\10"+
    "\1\0\1\10\1\0\3\10\3\0\31\10\1\u0172\26\0"+
    "\4\10\7\0\3\10\1\0\1\10\1\0\3\10\3\0"+
    "\22\10\1\u0173\7\10\26\0\4\10\7\0\3\10\1\0"+
    "\1\10\1\0\3\10\3\0\3\10\1\u0174\26\10\26\0"+
    "\4\10\7\0\3\10\1\0\1\10\1\0\3\10\3\0"+
    "\4\10\1\u0175\25\10\26\0\4\10\7\0\3\10\1\0"+
    "\1\10\1\0\3\10\3\0\21\10\1\u0176\10\10\26\0"+
    "\4\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18602];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\10\1\1\11\24\1\2\11\6\1\12\11"+
    "\1\1\1\11\1\1\1\11\2\1\1\0\2\11\2\1"+
    "\1\0\1\1\1\0\3\11\1\0\1\11\1\1\1\0"+
    "\51\1\2\11\1\1\1\11\1\1\16\11\2\1\5\11"+
    "\2\0\2\1\1\0\2\11\73\1\1\11\1\1\2\11"+
    "\2\0\5\11\2\0\5\11\56\1\1\11\1\0\42\1"+
    "\1\11\104\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[374];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuffer strbuf = new StringBuffer(128);
  int sub_line;
  int sub_column;

  /** String literal start position. */
  int stringStartLine, stringStartColumn;

  private Symbol sym(short id) {
    return new Symbol(id, yyline + 1, yycolumn + 1, len(), str());
  }

  private Symbol sym(short id, String value) {
    return new Symbol(id, yyline + 1, yycolumn + 1, len(), value);
  }

  private Symbol sym(short id, String value, int start_line, int start_column, int len) {
    return new Symbol(id, start_line, start_column, len, value);
  }

  private String str() { return yytext(); }
  private int len() { return yylength(); }

  private void error(String msg) throws Scanner.Exception {
    throw new Scanner.Exception(yyline + 1, yycolumn + 1, msg);
  }

  private void stringStart() {
    yybegin(STRING);
    stringStartLine = yyline + 1;
    stringStartColumn = yycolumn + 1;
    strbuf.setLength(0);
  }

  private Symbol stringEnd() {
    yybegin(YYINITIAL);
    String text = strbuf.toString();
    int length = text.length() + 2;
    return new Symbol(Terminals.STRING_LITERAL, stringStartLine, stringStartColumn, length, text);
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public OriginalScanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2892) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol nextToken() throws java.io.IOException, Scanner.Exception {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                /* detect position of first SUB character */
  if (!(sub_line == 0 && sub_column == 0) && (sub_line != yyline || sub_column != yycolumn-1)) {
    /* reset to only return error once */
    sub_line = 0;
    sub_column = 0;
    /* return error */
    error("error");
  }
  return sym(Terminals.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { error("illegal character \""+str()+ "\"");
            }
          case 136: break;
          case 2: 
            { 
            }
          case 137: break;
          case 3: 
            { return sym(Terminals.DIV);
            }
          case 138: break;
          case 4: 
            { return sym(Terminals.MULT);
            }
          case 139: break;
          case 5: 
            { return sym(Terminals.IDENTIFIER);
            }
          case 140: break;
          case 6: 
            { return sym(Terminals.NUMERIC_LITERAL);
            }
          case 141: break;
          case 7: 
            { return sym(Terminals.DOT);
            }
          case 142: break;
          case 8: 
            { return sym(Terminals.MINUS);
            }
          case 143: break;
          case 9: 
            { stringStart();
            }
          case 144: break;
          case 10: 
            { return sym(Terminals.EQ);
            }
          case 145: break;
          case 11: 
            { return sym(Terminals.GT);
            }
          case 146: break;
          case 12: 
            { return sym(Terminals.LT);
            }
          case 147: break;
          case 13: 
            { return sym(Terminals.NOT);
            }
          case 148: break;
          case 14: 
            { return sym(Terminals.COMP);
            }
          case 149: break;
          case 15: 
            { return sym(Terminals.QUESTION);
            }
          case 150: break;
          case 16: 
            { return sym(Terminals.COLON);
            }
          case 151: break;
          case 17: 
            { return sym(Terminals.AND);
            }
          case 152: break;
          case 18: 
            { return sym(Terminals.OR);
            }
          case 153: break;
          case 19: 
            { return sym(Terminals.PLUS);
            }
          case 154: break;
          case 20: 
            { return sym(Terminals.XOR);
            }
          case 155: break;
          case 21: 
            { return sym(Terminals.MOD);
            }
          case 156: break;
          case 22: 
            { return sym(Terminals.LPAREN);
            }
          case 157: break;
          case 23: 
            { return sym(Terminals.RPAREN);
            }
          case 158: break;
          case 24: 
            { return sym(Terminals.LBRACE);
            }
          case 159: break;
          case 25: 
            { return sym(Terminals.RBRACE);
            }
          case 160: break;
          case 26: 
            { return sym(Terminals.LBRACK);
            }
          case 161: break;
          case 27: 
            { return sym(Terminals.RBRACK);
            }
          case 162: break;
          case 28: 
            { return sym(Terminals.SEMICOLON);
            }
          case 163: break;
          case 29: 
            { return sym(Terminals.COMMA);
            }
          case 164: break;
          case 30: 
            { return sym(Terminals.AT);
            }
          case 165: break;
          case 31: 
            { if(sub_line == 0 && sub_column == 0) {
    sub_line = yyline; sub_column = yycolumn;
  }
            }
          case 166: break;
          case 32: 
            { strbuf.append(str());
            }
          case 167: break;
          case 33: 
            { error("unterminated string at end of line");
            }
          case 168: break;
          case 34: 
            { return stringEnd();
            }
          case 169: break;
          case 35: 
            { return sym(Terminals.DIVEQ);
            }
          case 170: break;
          case 36: 
            { return sym(Terminals.MULTEQ);
            }
          case 171: break;
          case 37: 
            { return sym(Terminals.MINUSMINUS);
            }
          case 172: break;
          case 38: 
            { return sym(Terminals.MINUSEQ);
            }
          case 173: break;
          case 39: 
            { return sym(Terminals.RARROW);
            }
          case 174: break;
          case 40: 
            { error("unterminated character literal at end of line");
            }
          case 175: break;
          case 41: 
            { return sym(Terminals.IF);
            }
          case 176: break;
          case 42: 
            { return sym(Terminals.DO);
            }
          case 177: break;
          case 43: 
            { return sym(Terminals.EQEQ);
            }
          case 178: break;
          case 44: 
            { return sym(Terminals.GTEQ);
            }
          case 179: break;
          case 45: 
            { return sym(Terminals.RSHIFT);
            }
          case 180: break;
          case 46: 
            { return sym(Terminals.LTEQ);
            }
          case 181: break;
          case 47: 
            { return sym(Terminals.LSHIFT);
            }
          case 182: break;
          case 48: 
            { return sym(Terminals.NOTEQ);
            }
          case 183: break;
          case 49: 
            { return sym(Terminals.DOUBLECOLON);
            }
          case 184: break;
          case 50: 
            { return sym(Terminals.ANDEQ);
            }
          case 185: break;
          case 51: 
            { return sym(Terminals.ANDAND);
            }
          case 186: break;
          case 52: 
            { return sym(Terminals.OREQ);
            }
          case 187: break;
          case 53: 
            { return sym(Terminals.OROR);
            }
          case 188: break;
          case 54: 
            { return sym(Terminals.PLUSEQ);
            }
          case 189: break;
          case 55: 
            { return sym(Terminals.PLUSPLUS);
            }
          case 190: break;
          case 56: 
            { return sym(Terminals.XOREQ);
            }
          case 191: break;
          case 57: 
            { return sym(Terminals.MODEQ);
            }
          case 192: break;
          case 58: 
            { error("illegal escape sequence \""+str()+"\"");
            }
          case 193: break;
          case 59: 
            { strbuf.append( '\'' );
            }
          case 194: break;
          case 60: 
            { strbuf.append( '\"' );
            }
          case 195: break;
          case 61: 
            { strbuf.append( '\\' );
            }
          case 196: break;
          case 62: 
            { strbuf.append((char)Integer.parseInt(str().substring(1),8));
            }
          case 197: break;
          case 63: 
            { strbuf.append( '\r' );
            }
          case 198: break;
          case 64: 
            { strbuf.append( '\t' );
            }
          case 199: break;
          case 65: 
            { strbuf.append( '\b' );
            }
          case 200: break;
          case 66: 
            { strbuf.append( '\n' );
            }
          case 201: break;
          case 67: 
            { strbuf.append( '\f' );
            }
          case 202: break;
          case 68: 
            { return sym(Terminals.ELLIPSIS);
            }
          case 203: break;
          case 69: 
            { return sym(Terminals.CHARACTER_LITERAL, str().substring(1, len()-1));
            }
          case 204: break;
          case 70: 
            { return sym(Terminals.END);
            }
          case 205: break;
          case 71: 
            { return sym(Terminals.TRY);
            }
          case 206: break;
          case 72: 
            { return sym(Terminals.NEW);
            }
          case 207: break;
          case 73: 
            { return sym(Terminals.INT);
            }
          case 208: break;
          case 74: 
            { return sym(Terminals.FOR);
            }
          case 209: break;
          case 75: 
            { return sym(Terminals.RSHIFTEQ);
            }
          case 210: break;
          case 76: 
            { return sym(Terminals.URSHIFT);
            }
          case 211: break;
          case 77: 
            { return sym(Terminals.LSHIFTEQ);
            }
          case 212: break;
          case 78: 
            { return sym(Terminals.CHARACTER_LITERAL, "\'");
            }
          case 213: break;
          case 79: 
            { return sym(Terminals.CHARACTER_LITERAL, "\"");
            }
          case 214: break;
          case 80: 
            { return sym(Terminals.CHARACTER_LITERAL, "\\");
            }
          case 215: break;
          case 81: 
            { int val = Integer.parseInt(str().substring(2,len()-1),8);
                                   return sym(Terminals.CHARACTER_LITERAL, new Character((char)val).toString());
            }
          case 216: break;
          case 82: 
            { return sym(Terminals.CHARACTER_LITERAL, "\r");
            }
          case 217: break;
          case 83: 
            { return sym(Terminals.CHARACTER_LITERAL, "\t");
            }
          case 218: break;
          case 84: 
            { return sym(Terminals.CHARACTER_LITERAL, "\b");
            }
          case 219: break;
          case 85: 
            { return sym(Terminals.CHARACTER_LITERAL, "\n");
            }
          case 220: break;
          case 86: 
            { return sym(Terminals.CHARACTER_LITERAL, "\f");
            }
          case 221: break;
          case 87: 
            { return sym(Terminals.ELSE);
            }
          case 222: break;
          case 88: 
            { return sym(Terminals.ENUM);
            }
          case 223: break;
          case 89: 
            { return sym(Terminals.BOOLEAN_LITERAL);
            }
          case 224: break;
          case 90: 
            { return sym(Terminals.THIS);
            }
          case 225: break;
          case 91: 
            { return sym(Terminals.BYTE);
            }
          case 226: break;
          case 92: 
            { return sym(Terminals.CASE);
            }
          case 227: break;
          case 93: 
            { return sym(Terminals.CHAR);
            }
          case 228: break;
          case 94: 
            { return sym(Terminals.LONG);
            }
          case 229: break;
          case 95: 
            { return sym(Terminals.NULL_LITERAL);
            }
          case 230: break;
          case 96: 
            { return sym(Terminals.EOF);
            }
          case 231: break;
          case 97: 
            { return sym(Terminals.VOID);
            }
          case 232: break;
          case 98: 
            { return sym(Terminals.URSHIFTEQ);
            }
          case 233: break;
          case 99: 
            { return sym(Terminals.SHORT);
            }
          case 234: break;
          case 100: 
            { return sym(Terminals.SUPER);
            }
          case 235: break;
          case 101: 
            { return sym(Terminals.THROW);
            }
          case 236: break;
          case 102: 
            { return sym(Terminals.BREAK);
            }
          case 237: break;
          case 103: 
            { return sym(Terminals.CATCH);
            }
          case 238: break;
          case 104: 
            { return sym(Terminals.CLASS);
            }
          case 239: break;
          case 105: 
            { return sym(Terminals.FLOAT);
            }
          case 240: break;
          case 106: 
            { return sym(Terminals.FINAL);
            }
          case 241: break;
          case 107: 
            { return sym(Terminals.WHILE);
            }
          case 242: break;
          case 108: 
            { return sym(Terminals.DOCUMENTATION_COMMENT);
            }
          case 243: break;
          case 109: 
            { return sym(Terminals.ASSERT);
            }
          case 244: break;
          case 110: 
            { return sym(Terminals.STATIC);
            }
          case 245: break;
          case 111: 
            { return sym(Terminals.SWITCH);
            }
          case 246: break;
          case 112: 
            { return sym(Terminals.RETURN);
            }
          case 247: break;
          case 113: 
            { return sym(Terminals.THROWS);
            }
          case 248: break;
          case 114: 
            { return sym(Terminals.NATIVE);
            }
          case 249: break;
          case 115: 
            { return sym(Terminals.IMPORT);
            }
          case 250: break;
          case 116: 
            { return sym(Terminals.DOUBLE);
            }
          case 251: break;
          case 117: 
            { return sym(Terminals.PUBLIC);
            }
          case 252: break;
          case 118: 
            { return sym(Terminals.EXTENDS);
            }
          case 253: break;
          case 119: 
            { return sym(Terminals.TSDELAY);
            }
          case 254: break;
          case 120: 
            { return sym(Terminals.BOOLEAN);
            }
          case 255: break;
          case 121: 
            { return sym(Terminals.DEFAULT);
            }
          case 256: break;
          case 122: 
            { return sym(Terminals.FINALLY);
            }
          case 257: break;
          case 123: 
            { return sym(Terminals.PACKAGE);
            }
          case 258: break;
          case 124: 
            { return sym(Terminals.PRIVATE);
            }
          case 259: break;
          case 125: 
            { return sym(Terminals.ABSTRACT);
            }
          case 260: break;
          case 126: 
            { return sym(Terminals.STRICTFP);
            }
          case 261: break;
          case 127: 
            { return sym(Terminals.CONTINUE);
            }
          case 262: break;
          case 128: 
            { return sym(Terminals.VOLATILE);
            }
          case 263: break;
          case 129: 
            { return sym(Terminals.TRANSIENT);
            }
          case 264: break;
          case 130: 
            { return sym(Terminals.TYPESTATE);
            }
          case 265: break;
          case 131: 
            { return sym(Terminals.INTERFACE);
            }
          case 266: break;
          case 132: 
            { return sym(Terminals.PROTECTED);
            }
          case 267: break;
          case 133: 
            { return sym(Terminals.INSTANCEOF);
            }
          case 268: break;
          case 134: 
            { return sym(Terminals.IMPLEMENTS);
            }
          case 269: break;
          case 135: 
            { return sym(Terminals.SYNCHRONIZED);
            }
          case 270: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
