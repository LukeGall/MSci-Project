aspect RewriteAccess {
	// The rewrite operations iterate on an Dot until its left node
	// is not a package reference or the node itself is not an Dot anymore
	rewrite Dot {
		when (isDotPackage() && getRight().isAbstractDot()) to Access {
			Dot dot = (Dot) getRight();
			dot.setLeft(new PackageParseName(getRightName(), getLeftName()));
			return dot;
		}
		when (isDotPackage() && getRight() instanceof ParseName) to Access{
			return new PackageParseName( getRightName(), getLeftName());
		}
	}

	syn lazy boolean Dot.isDotPackage() =
		!isAbstractDotParent() && !(getParent() instanceof ImportDecl) && isPackageAccess();

	syn boolean Expr.isPackage() = false;
	eq ParseName.isPackage() = isPackage(getName());

	syn boolean Expr.isPackageAccess(Dot a) = false;
	eq ParseName.isPackageAccess(Dot a) = (a.getLeft() instanceof ParseName) ? isPackage() : false;

	syn lazy String ParseName.getName() =  name();
	eq PackageParseName.getName() = getPackage() + "." + getID();

	syn String Dot.getRightName() {
		if(getRight() instanceof ParseName)
			return ((ParseName) getRight()).getName();
		else if(getRight() instanceof Dot)
			return ((Dot) getRight()).getLeftName();
		return "";
	}

	syn String Dot.getLeftName() = getLeft() instanceof ParseName ? ((ParseName) getLeft()).getName(): "";

	eq Program.getChild().isPackage(String Package) = false;

	inh boolean ParseName.isPackage(String Package);

	eq CompilationUnit.getImportDecl(int i).isPackage(String Package) = false;
	eq CompilationUnit.getTypeDecl().isPackage(String Package) = isPackage(Package);

	syn boolean CompilationUnit.isPackage(String Package) {
		if(getPackageDecl().startsWith(Package))
			return true;
		for(int i = 0; i < getNumImportDecl(); i++)
			if(getImportDecl(i).startsWith(Package))
				return true;

		return false;
	}

	//TODO is there a better way of doing it? -> Check Dot by Dot
	syn lazy boolean ImportDecl.startsWith(String Package);
	eq SingleTypeImportDecl.startsWith(String Package) {
		String[] imp = getAccess().toString().split("\\.");
		String[] packages = Package.split("\\.");
		if(imp.length <= packages.length)
			return false;
		for(int i = 0; i < packages.length; i++)
			if(!imp[i].equals(packages[i]))
				return false;

		return true;
	}
	eq TypeImportOnDemandDecl.startsWith(String Package) {
		String[] imp = getAccess().toString().split("\\.");
		String[] packages = Package.split("\\.");
		if(imp.length < packages.length)
			return false;
		for(int i = 0; i < packages.length; i++)
			if(!imp[i].equals(packages[i]))
				return false;

		return true;
	}

/* TODO */
	eq SingleStaticImportDecl.startsWith(String Package) {
		String[] imp = getAccess().toString().split("\\.");
		String[] packages = Package.split("\\.");
		if(imp.length <= packages.length)
			return false;
		for(int i = 0; i < packages.length; i++)
			if(!imp[i].equals(packages[i]))
				return false;

		return true;
	}
/* TODO */
	eq StaticImportOnDemandDecl.startsWith(String Package) {
		String[] imp = getAccess().toString().split("\\.");
		String[] packages = Package.split("\\.");
		if(imp.length < packages.length)
			return false;
		for(int i = 0; i < packages.length; i++)
			if(!imp[i].equals(packages[i]))
				return false;

		return true;
	}
}
