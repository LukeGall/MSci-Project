aspect CreateTypestate {

	syn lazy GraphNode TypestateDecl.createTypestate() = new InitNode().addNext(getInitState().createTypestate());

	private GraphNode State.StateNode = null;
	syn lazy GraphNode State.createTypestate() {
		StateNode = new LoopNode();
		return StateNode.addNext(getTypestate().createTypestate());
	}

	syn boolean State.hasStateNode() = StateNode != null;
	syn GraphNode State.getStateNode() = StateNode;

	syn lazy GraphNode Typestate.createTypestate();

	eq TypestateMethodList.createTypestate() {
		GraphNode n = new LoopNode();
		for(int i = 0; i < getNumTypestateMethod(); i++){
			n.addNext(getTypestateMethod(i).createTypestate());
		}
		return n;
	}

	eq EndTypestate.createTypestate() = new EndNode();

	eq TypestateMethod.createTypestate(){
			return new MethodNode(getTType().getAccess(), getID(), getParameterTypes(), null, getTimeConstraint()).addNext(getTypestate().createTypestate());
	}

	eq TypestateSwitch.createTypestate() {
		SwitchNode n =  new SwitchNode();

		for(int i = 0; i < getNumTypestateSwitchCase(); i++) {
			SwitchCase c = new SwitchCase(getTypestateSwitchCase(i).getLabel(), null, getTypestateSwitchCase(i).getTimeConstraint());

			c.addNext(getTypestateSwitchCase(i).getTypestate().createTypestate());
			n.addNext(c);
		}
		return n;
	}

	eq TypestateLabel.createTypestate() =
		getTarget().hasStateNode() ? getTarget().getStateNode() : getTarget().createTypestate();

	syn lazy GraphNode TType.createTypestate() = null;
	eq TTypestate.createTypestate(){
		return new LoopNode().addNext(getTypestate().createTypestate());
	}

}
