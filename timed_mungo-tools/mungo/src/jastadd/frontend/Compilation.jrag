aspect Compilation{

    refine NameCheck eq TypeDecl.nameProblems(){
    Collection<Problem> problems=refined();

    if(isTopLevelType() && lookupType(packageName(), name()) != this
    	&&lookupType(packageName(),name()).isSingleton()){ //temporary hack
	    Problem p = errorf("duplicate type %s in package %s", name(), packageName());
	    for(Problem pr : problems){
	    	if(pr.compareTo(p) == 0)
	    		problems.remove(pr);
	    }
    }
    return problems;
    }

	private PrintStream Program.outStream = System.out;
	private PrintStream Program.errorStream = System.err;

	public void Program.setOutputStream(PrintStream s) {
		outStream = s;
	}

	public void Program.setErrorStream(PrintStream s) {
		errorStream = s;
	}

	public PrintStream Program.outStream() {
		return outStream;
	}

	public PrintStream Program.errorStream() {
		return errorStream;
	}

	private ArrayList<String> Program.compiledPaths = new ArrayList<String>();

	protected static String Program.protocolSuffix() {
		return ".protocol";
	}

	protected static String Program.fileSuffix() {
		return javaFileSuffix();
	}

	protected static String Program.javaFileSuffix() {
		return ".java";
	}

	protected CompilationUnit Program.compile(String path) {
		CompilationUnit u = null;

		for(int i = 0; i < compiledPaths.size(); i++){
			if(compiledPaths.get(i).equals(path))
				return null;
			}

		if(this.options().hasOption("-v"))
			outStream().println("Compiling file " + path);

		compiledPaths.add(path);

		try{
			u = addSourceFile(path);

		    String fullName = path.substring(0, path.indexOf(".")).replace("/", ".");
		    for (int j = 0; j < u.getNumTypeDecl(); j++) {
		        TypeDecl type = u.getTypeDecl(j);

				if (!sourceTypeMap.containsKey(type.fullName())) {
		      		sourceTypeMap.put(type.fullName(), type);
		    	}else{
		    		if(sourceTypeMap.get(type.fullName()).isUnknown()){
						sourceTypeMap.replace(type.fullName(), type);
		    		}
				}
			}
		}catch(Exception e) {
			outStream().println(e);
			return null;
		}

		if(this.options().hasOption("-v"))
			outStream().println("Loading file " + path);

		return u;
	}

	public void Program.collect() {
		for(int i = 0; i < getNumCompilationUnit(); i++)
			getCompilationUnit(i).collectSemantic();

		for(int i = 0; i < getNumCompilationUnit(); i++) {
			errors.addAll(getCompilationUnit(i).errors);
			numWarnings += getCompilationUnit(i).numWarnings;
		}

		for(int i = 0; i < getNumCompilationUnit(); i++)
			getCompilationUnit(i).collectTypestate();

		for(int i = 0; i < getNumCompilationUnit(); i++) {
			errors.addAll(getCompilationUnit(i).errors);
			numWarnings += getCompilationUnit(i).numWarnings;
		}
	}

	public boolean Program.compile(String[] args) {
		for(int i = 0; i < args.length; i++)
			if(new File(args[i]).exists())
				if(!args[i].endsWith(fileSuffix()) && !args[i].endsWith(protocolSuffix()))
					errorStream().println("File " + args[i] + " should have suffix " + fileSuffix() + " or suffix " + protocolSuffix());
				else{
					compiledPaths.add(args[i]);
					compile(args[i]);
				}
			else
				errorStream().println("File " + args[i] + " not found.");
		collect();

		if(hasErrors()){
			printErrors();
		}else{
			if(hasWarnings())
				printErrors();
		}
		return !hasErrors();
	}

}
