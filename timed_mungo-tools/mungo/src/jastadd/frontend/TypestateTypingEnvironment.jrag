aspect TypestateTypingEnvironment {

	/*******************************************************************************/
	/*                 Type Environment Structures                                 */
	/*******************************************************************************/

	class TypestateVar {
		GraphNode current;
		Map<ASTNode, GraphNode> end;
		Map<ASTNode, GraphNode> start;

		private ArrayList<GraphNode> startGraph;
		private ArrayList<Expr> startExpr;
		private ArrayList<GraphNode> errorGraph;
		private ArrayList<ASTNode> errorExpr;

		//TODO better implementation for this.
		public static boolean addTypestate = false;

		TypestateVar() {
			current = new EndNode();
			end = new HashMap<ASTNode, GraphNode>();
			start = new HashMap<ASTNode, GraphNode>();
			startGraph = new ArrayList<GraphNode>();
			startExpr = new ArrayList<Expr>();

			errorGraph = new ArrayList<GraphNode>();
			errorExpr = new ArrayList<ASTNode>();
		}

		protected void resetCurrent() {
			current = new EndNode();
		}

		private void addErrorGraph(ASTNode e) {
			errorGraph.add(current);
			errorExpr.add(e);
			resetCurrent();
		}

		protected void addTypestate(Expr e) {
			if(current.isReturned()) {
//				bd.returnGraph.add(current);
//				bd.returnExpr.add(e);
//				bd.returnTypestate.add(this);
			}
			//TODO better implementation here
			else if(addTypestate == false && !current.isPlugged()){
			}
//			else if(current.isPlugged()) {
//				bd.pluggedGraph.add(current);
//				bd.pluggedExpr.add(e);
//				bd.pluggedTypestate.add(this);
//			}
			else {
				startGraph.add(current);
				startExpr.add(e);
			}
			resetCurrent();
		}

		protected void checkError(ASTNode e) {
			if(current!= null && current.onlyEndNodes() == -1)
				addErrorGraph(e);
		}

		protected void connectGraph(BodyDecl bd) {
		}


		protected void resetConnectionGraph(BodyDecl bd) {
		}

		protected GraphNode getConnectionGraph(BodyDecl bd) {
			return null;
		}

		protected GraphNode getPlugGraph(BodyDecl bd) {
			return null;
		}

		protected void reportErrors(String errorMessage) {
			for(int i = errorGraph.size() - 1; i >= 0; i--)
				errorExpr.get(i).addSemanticError(errorMessage);
		}

		public String classInstanceExprtoString(ClassInstanceExpr e){
				String str = "new ";
				str += e.getAccess();
				str += "(";

				for(Expr expr : e.getArgList()){
					str += expr.toString();
					str += ", ";
				}
				str = str.trim();
				if(str.contains(","))
					str = str.substring(0, str.lastIndexOf(","));
				str += ")";
				return str.toString();
		}

		protected void checkTypestate(GraphNode t, String errorMessage, HashMap<String, Double> clocks){
			for(int i = startGraph.size() - 1; i >= 0; i--) {
				GraphNode n = startGraph.get(i);
				n.normalise();
				if(!t.includes(n, clocks) || t.getErrorClockConstraint()!=null) {
					CompilationUnit u  = (CompilationUnit) startExpr.get(i).getCompilationUnitAncestor();
					String filePath = (u).pathName();
					String errorMsg;
					ClockConstraint errorClockConstraint = t.getErrorClockConstraint();
					HashMap<String, Double> errorClocks = t.getErrorClocks();

					if(errorClockConstraint != null) {
						errorMsg = "Object created at " + filePath + ": " + ASTNode.getLine(startExpr.get(i).getStart());
						errorMsg += ". Time constraint error found for " + t.getTimeExpectedNode().nextToString()+ ". Found " + errorClockConstraint.toString() + ", but had clocks of: " + errorClocks.toString() + ".";
						t.getTimeErrorNode().getExpr().addSemanticError(errorMsg);
					} 

					if(t.getErrorNode() != null) {
						errorMsg = "Object created at " + filePath + ": " + ASTNode.getLine(startExpr.get(i).getStart());
						errorMsg += ". Typestate mismatch. Found: " + t.getErrorNode().nextToString() + ". Expected: " + t.getExpectedNode().nextToString() + ".";
						t.getErrorNode().getExpr().addSemanticError(errorMsg);
					}

				}

				if(startExpr.get(i).getCompilationUnitAncestor().program().options().hasOption("-pi"))
					//TODO have a proper format for the n.stringState() string
					startExpr.get(i).addInfo(n.stringState());
			}
		}
	}

	class TypestatePar extends TypestateVar {
		private LoopNode parameterNode;

		TypestatePar() {
			super();
		}

		protected void resetConnectionGraph(BodyDecl bd) {
			current = new EndNode();
			parameterNode = new LoopNode();
		}

		protected void connectGraph(BodyDecl bd) {
			parameterNode.addNext(current);
		}

		protected GraphNode getConnectionGraph(BodyDecl bd) {
			return parameterNode;
		}
	}

	class TypestateField extends TypestateVar {
		private Map<BodyDecl, GraphNode> connectGraph;
		private Map<BodyDecl, GraphNode> plugGraph;

		TypestateField() {
			super();

			connectGraph = new HashMap<BodyDecl, GraphNode>();
			plugGraph = new HashMap<BodyDecl, GraphNode>();
			current = new EndNode();
		}
		protected void resetConnectionGraph(BodyDecl bd) {
			connectGraph.remove(bd);
			connectGraph.put(bd, new LoopNode());
			plugGraph.remove(bd);
			current = new LoopNode().addNext(current);
			plugGraph.put(bd, current);
		}

		protected void connectGraph(BodyDecl bd) {
			connectGraph.get(bd).addNext(current);
		}

		protected GraphNode getConnectionGraph(BodyDecl bd) {
			return connectGraph.get(bd);
		}

		protected GraphNode getPlugGraph(BodyDecl bd) {
			return plugGraph.get(bd);
		}
	}
}
