import java.io.PrintStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.lang.StringBuffer;

/* This aspect deals with the printing of the Java Typestate
 * programs.
 */

aspect Rewrite {

	/*
	 * TypestateStream class is used to create an output File Writer.
	 * It is used for printing the AST
	 */
	public class TypestateStream {
		private String path;
		private PrintStream printStream;
		private StringBuffer sb;
		private PrintStream out;

		// Indent counts the number of indentations
		private int indent;
		private String indentString;
		private boolean changeLine;

		// The next three methods are used for controlling indentation
		public void pushIndent() {
			indent++;
			createIndentString();
		}
		public void popIndent() {
			indent--;
			createIndentString();
		}

		private void createIndentString() {
			indentString = "";
			for(int i = 0; i < indent; i++)
				indentString = indentString + "\t";
		}

		public TypestateStream() {
			path = null;
			out = null;
			sb = new StringBuffer();
			indent = 0;
			changeLine = true;
			createIndentString();
		}

		public TypestateStream(String path) throws FileNotFoundException {
			this();
			printStream = new PrintStream(path);
			this.path = new String(path);
		}

		public TypestateStream(String path, PrintStream out) throws FileNotFoundException {
			this(path);
			this.out = out;
		}

		public TypestateStream(PrintStream out) {
			this();
			this.out = out;
		}

		public void println() {
			if (printStream != null)
				printStream.println();
			if(out != null)
				out.println();
			sb.append("\n");
			changeLine = true;
		}

		public void println(String s) {
			String is = (changeLine == true) ? indentString : "";
			if (printStream != null)
				printStream.println(is + s);
			if(out != null)
				out.println(is + s);
			sb.append(is + s + "\n");
			changeLine = true;
		}

		public void print(String s) {
			String is = (changeLine == true) ? indentString : "";
			if (printStream != null)
				printStream.print(is + s);
			if(out != null)
				out.print(is + s);
			sb.append(is + s);
			changeLine = false;
		}

		public void reset() {
			sb = new StringBuffer();
			path = null;
			out = null;
		}

		public void close() {
			if (printStream != null)
				printStream.close();
		}

		public String toString() {
			return sb.toString();
		}

	}

	protected void Expr.Rewrite(TypestateStream stream) {}

	protected void Dims.Rewrite(TypestateStream stream) {
		stream.print("[");
		if(hasExpr())
			getExpr().Rewrite(stream);
		stream.print("]");
	}

	syn String Unary.getOp() = "";
	syn String PreIncExpr.getOp() = "++";
	syn String PreDecExpr.getOp() = "--";
	syn String MinusExpr.getOp() = "+";
	syn String PlusExpr.getOp() = "-";
	syn String BitNotExpr.getOp() = "~";
	syn String LogNotExpr.getOp() = "!";

	protected void CastExpr.Rewrite(TypestateStream stream) {
		stream.print("(");
		getTypeAccess().Rewrite(stream);
		stream.print(") ");
		getExpr().Rewrite(stream);
	}

	protected void Unary.Rewrite(TypestateStream stream) {
		stream.print(getOp());
		getOperand().Rewrite(stream);
	}

	syn String PostfixExpr.getOp() = "";
	syn String PostIncExpr.getOp() = "++";
	syn String PostDecExpr.getOp() = "--";

	protected void PostfixExpr.Rewrite(TypestateStream stream) {
		getOperand().Rewrite(stream);
		stream.print(getOp());
	}

	syn String AssignExpr.getOp() = "";
	syn String AssignSimpleExpr.getOp() = "=";
	syn String AssignMulExpr.getOp() = "*=";
	syn String AssignDivExpr.getOp() = "/=";
	syn String AssignModExpr.getOp() = "%=";
	syn String AssignPlusExpr.getOp() = "+=";
	syn String AssignMinusExpr.getOp() = "-=";
	syn String AssignLShiftExpr.getOp() = "<<=";
	syn String AssignRShiftExpr.getOp() = ">>=";
	syn String AssignURShiftExpr.getOp() = ">>>=";
	syn String AssignAndExpr.getOp() = "&=";
	syn String AssignXorExpr.getOp() = "^=";
	syn String AssignOrExpr.getOp() = "|=";

	protected void AssignExpr.Rewrite(TypestateStream stream) {
		getDest().Rewrite(stream);
		stream.print(" " + getOp() + " ");
		getSource().Rewrite(stream);
	}

	protected void Binary.Rewrite(TypestateStream stream) {
		getLeftOperand().Rewrite(stream);
		stream.print(" " + getOp() +" ");
		getRightOperand().Rewrite(stream);
	}

	syn String Binary.getOp() = "";
	syn String MulExpr.getOp() = "*";
	syn String DivExpr.getOp() = "/";
	syn String ModExpr.getOp() = "%";

	syn String AddExpr.getOp() = "+";
	syn String SubExpr.getOp() = "-";

	syn String LShiftExpr.getOp() = "<<";
	syn String RShiftExpr.getOp() = ">>";
	syn String URShiftExpr.getOp() = ">>>";

	syn String AndBitwiseExpr.getOp() = "&";
	syn String OrBitwiseExpr.getOp() = "|";
	syn String XorBitwiseExpr.getOp() = "^";

	syn String AndLogicalExpr.getOp() = "&&";
	syn String OrLogicalExpr.getOp() = "||";

	syn String LTExpr.getOp() = "<";
	syn String GTExpr.getOp() = ">";
	syn String LEExpr.getOp() = "<=";
	syn String GEExpr.getOp() = ">=";

	syn String EQExpr.getOp() = "==";
	syn String NEExpr.getOp() = "!=";

	protected void InstanceOfExpr.Rewrite(TypestateStream stream) {
		getExpr().Rewrite(stream);
		stream.print(" instanceof ");
		getTypeAccess().Rewrite(stream);
	}

	protected void ConditionalExpr.Rewrite(TypestateStream stream) {
		getCondition().Rewrite(stream);
		stream.print(" ? ");
		getTrueExpr().Rewrite(stream);
		stream.print(" : ");
		getFalseExpr().Rewrite(stream);
	}

	protected void Literal.Rewrite(TypestateStream stream) {
		stream.print(getLITERAL());
	}

	//TODO the getLiteral() returns a string that may have special characters \newline \tab etc. Print them as \n \t etc
	protected void StringLiteral.Rewrite(TypestateStream stream) {
		stream.print("\"" + getLITERAL() + "\"");
	}

	protected void CharacterLiteral.Rewrite(TypestateStream stream) {
		stream.print("\'" + getLITERAL() + "\'");
	}

	protected void ArrayInit.Rewrite(TypestateStream stream) {
		stream.print("{");
		for(int i = 0; i < getNumInit(); i++) {
			if(i != 0)
				stream.print(", ");
			getInit(i).Rewrite(stream);
		}
		stream.print("}");
	}

	protected void ClassInstanceExpr.Rewrite(TypestateStream stream) {
		stream.print("new ");
		getAccess().Rewrite(stream);
		stream.print("(");
		for(int i = 0; i < getNumArg(); i++) {
			if(i != 0)
				stream.print(", ");
			getArg(i).Rewrite(stream);
		}
		stream.print(")");
		//Deprecated
		if(hasTypeDecl())
			type().Rewrite(stream);
	}

	protected void ArrayCreationExpr.Rewrite(TypestateStream stream) {
		stream.print("new ");
		getTypeAccess().Rewrite(stream);
		if(hasArrayInit())
			getArrayInit().Rewrite(stream);
	}

	protected void Access.Rewrite(TypestateStream stream) {}

	protected void ParseName.Rewrite(TypestateStream stream) {
		stream.print(name());
	}

	protected void PackageParseName.Rewrite(TypestateStream stream) {
		stream.print(getPackage() + "." + getID());
	}

	protected void Dot.Rewrite(TypestateStream stream) {
		getLeft().Rewrite(stream);
		Access a = getRight();
		if(!(a instanceof ArrayAccess) && !(a.isAbstractDot() && (((Dot)a).getLeft() instanceof ArrayAccess)))
			stream.print(".");
		getRight().Rewrite(stream);
	}

	protected void PrimitiveTypeAccess.Rewrite(TypestateStream stream) {
		stream.print(name());
	}

	protected void ArrayAccess.Rewrite(TypestateStream stream) {
		stream.print("[");
		getExpr().Rewrite(stream);
		stream.print("]");
	}

	protected void ArrayTypeWithSizeAccess.Rewrite(TypestateStream stream) {
		getAccess().Rewrite(stream);
		stream.print("[");
		getExpr().Rewrite(stream);
		stream.print("]");
	}

	protected void ArrayTypeAccess.Rewrite(TypestateStream stream) {
		getAccess().Rewrite(stream);
		stream.print("[]");
	}

	protected void ClassAccess.Rewrite(TypestateStream stream) {
		stream.print("class");
	}

	protected void ThisAccess.Rewrite(TypestateStream stream) {
		stream.print("this");
	}

	//Deprecated
	protected void SuperAccess.Rewrite(TypestateStream stream) {
		stream.print("super");
	}

	protected void MethodAccess.Rewrite(TypestateStream stream) {
		stream.print(getID() + "(");
		for(int i = 0; i < getNumArg(); i++) {
			if(i != 0)
				stream.print(", ");
			getArg(i).Rewrite(stream);
		}
		stream.print(")");
	}

	protected void ParExpr.Rewrite(TypestateStream stream) {
		stream.print("(");
		getExpr().Rewrite(stream);
		stream.print(")");
	}

	//protected void SuperConstructorAccess.Rewrite(){} inherits from
	//ConstructorAccess.Rewrite()
	protected void ConstructorAccess.Rewrite(TypestateStream stream) {
		stream.print(getID() + "(");
		for(int i = 0; i < getNumArg(); i++) {
			if (i != 0)
				stream.print(", ");
			getArg(i).Rewrite(stream);
		}
		stream.print(")");
	}

	protected void ParameterDeclaration.Rewrite(TypestateStream stream) {
		getModifiers().Rewrite(stream);
		getTypeAccess().Rewrite(stream);
		stream.print(" " + getID());
	}

	protected void ImportDecl.Rewrite(TypestateStream stream) {}

	protected void SingleTypeImportDecl.Rewrite(TypestateStream stream) {
		stream.print("import ");
		getAccess().Rewrite(stream);
		stream.println(";");
	}

	protected void TypeImportOnDemandDecl.Rewrite(TypestateStream stream) {
		stream.print("import ");
		getAccess().Rewrite(stream);
		stream.println(".*;");
	}

	protected void Modifiers.Rewrite(TypestateStream stream) {
		for(int i = 0; i < getNumModifier(); i++)
			getModifier(i).Rewrite(stream);
	}

	protected void Modifier.Rewrite(TypestateStream stream) {
		stream.print(getID()+ " ");
	}

	protected void Declarator.Rewrite(TypestateStream stream) {
		stream.print(getID());
		for(int i = 0; i < getNumDims(); i++)
			getDims(i).Rewrite(stream);

		if(hasInit()) {
			stream.print(" = ");
			getInit().Rewrite(stream);
		}
	}

	protected void Stmt.Rewrite(TypestateStream stream) {}
	protected void Stmt.RewriteNoSemicolon(TypestateStream stream) {}

	protected void ExprStmt.Rewrite(TypestateStream stream) {
		getExpr().Rewrite(stream);
		stream.println(";");
	}

	protected void ExprStmt.RewriteNoSemicolon(TypestateStream stream) {
		getExpr().Rewrite(stream);
	}

	protected void VarDeclStmt.Rewrite(TypestateStream stream) {
		RewriteNoSemicolon(stream);
		stream.println(";");
	}

	protected void VarDeclStmt.RewriteNoSemicolon(TypestateStream stream) {
		getModifiers().Rewrite(stream);
		getTypeAccess().Rewrite(stream);
		stream.print(" ");
		for(int i = 0; i < getNumDeclarator(); i++) {
			if (i != 0)
				stream.print(", ");
			getDeclarator(i).Rewrite(stream);
		}
	}

	protected void IfStmt.Rewrite(TypestateStream stream) {
		stream.print("if(");
		getCondition().Rewrite(stream);
		stream.print(") ");
		getThen().Rewrite(stream);
		if(hasElse()) {
			stream.print("else ");
			getElse().Rewrite(stream);
		}
	}
	protected void ForStmt.Rewrite(TypestateStream stream) {
		stream.print("for(");
		for(int i = 0; i < getNumInitStmt(); i++) {
			if(i != 0)
				stream.print(", ");
				getInitStmt(i).RewriteNoSemicolon(stream);
		}
		stream.print("; ");
		getCondition().Rewrite(stream);
		stream.print("; ");
		for(int i = 0; i < getNumUpdateStmt(); i++) {
			if(i != 0)
				stream.print(", ");
			getUpdateStmt(i).RewriteNoSemicolon(stream);
		}
		stream.print(") ");
		getStmt().Rewrite(stream);

	}

	protected void SwitchStmt.Rewrite(TypestateStream stream) {
		stream.print("switch(");
		getExpr().Rewrite(stream);
		stream.print(")");
		getBlock().Rewrite(stream);
	}

	protected void ConstCase.Rewrite(TypestateStream stream) {
		stream.print("case ");
		getValue().Rewrite(stream);
		stream.println(":");
	}

	protected void DefaultCase.Rewrite(TypestateStream stream) {
		stream.println("default:");
	}

	protected void WhileStmt.Rewrite(TypestateStream stream) {
		stream.print("while(");
		getCondition().Rewrite(stream);
		stream.print(") ");
		getStmt().Rewrite(stream);
	}

	protected void DoStmt.Rewrite(TypestateStream stream) {
		stream.print("do ");
		getStmt().Rewrite(stream);
		stream.print("while(");
		getCondition().Rewrite(stream);
		stream.println(");");
	}

	protected void LabeledStmt.Rewrite(TypestateStream stream) {
		stream.println(getLabel() + ":");
		getStmt().Rewrite(stream);
	}

	protected void EmptyStmt.Rewrite(TypestateStream stream) {
		stream.println(";");
	}

	protected void BreakStmt.Rewrite(TypestateStream stream) {
		if(getLabel().equals(""))
			stream.println("break;");
		else
			stream.println("break " + getLabel() + ";");
	}

	protected void ContinueStmt.Rewrite(TypestateStream stream) {
		if(getLabel().equals(""))
			stream.println("continue;");
		else
			stream.println("continue " + getLabel() + ";");
	}

	protected void ReturnStmt.Rewrite(TypestateStream stream) {
		if(!hasResult())
			stream.println("return;");
		else {
			stream.print("return ");
			getResult().Rewrite(stream);
			stream.println(";");
		}
	}

	protected void ThrowStmt.Rewrite(TypestateStream stream) {
		stream.print("throw ");
		getExpr().Rewrite(stream);
		stream.println(";");
	}

	protected void TryStmt.Rewrite(TypestateStream stream) {
		stream.print("try ");
		getBlock().Rewrite(stream);
		for(int i = 0; i < getNumCatchClause(); i ++)
			getCatchClause(i).Rewrite(stream);
		if(hasFinally()) {
			stream.print("finally ");
			getFinally().Rewrite(stream);
		}
	}

	protected void AssertStmt.Rewrite(TypestateStream stream) {
		stream.print("assert ");
		getCondition().Rewrite(stream);
		if(hasMessage()) {
			stream.print(" : ");
			getMessage().Rewrite(stream);
		}
		stream.println(";");
	}

	protected void CatchClause.Rewrite(TypestateStream stream) {}
	protected void BasicCatch.Rewrite(TypestateStream stream) {
		stream.print("catch");
		stream.print("(");
		getParameter().Rewrite(stream);
		stream.print(") ");
		getBlock().Rewrite(stream);
	}

	protected void Block.Rewrite(TypestateStream stream) {
		stream.println("{");
		stream.pushIndent();
		for(int i = 0; i < getNumStmt(); i++)
			getStmt(i).Rewrite(stream);
		stream.popIndent();
		stream.println("}");
	}

	protected void BodyDecl.Rewrite(TypestateStream stream) {}

	protected void MethodDecl.Rewrite(TypestateStream stream) {
		getModifiers().Rewrite(stream);
		getTypeAccess().Rewrite(stream);
		stream.print(" " + getID() + "(");
		for(int i = 0; i < getNumParameter(); i++) {
			if (i != 0)
				stream.print(", ");
			getParameter(i).Rewrite(stream);
		}
		stream.print(")");
		if(getNumException() > 0) {
			stream.print(" throws ");
		}
		for(int i = 0; i < getNumException(); i++) {
			if(i != 0)
				stream.print(", ");
			getException(i).Rewrite(stream);
		}
		stream.print(" ");
		if(hasBlock())
			getBlock().Rewrite(stream);
		else
			stream.println(";");
	}

	protected void ConstructorDecl.Rewrite(TypestateStream stream) {
		getModifiers().Rewrite(stream);
		stream.print(getID() + "(");
		for(int i = 0; i < getNumParameter(); i++) {
			if (i != 0)
				stream.print(", ");
			getParameter(i).Rewrite(stream);
		}
		stream.print(")");
		if(getNumException() > 0) {
			stream.print(" throws ");
		}
		for(int i = 0; i < getNumException(); i++) {
			if(i != 0)
				stream.print(", ");
			getException(i).Rewrite(stream);
		}
		stream.println("{");
		stream.pushIndent();
		if(hasConstructorInvocation())
			getConstructorInvocation().Rewrite(stream);
		//not invoking Block.Rewrite due to the {}
		Block b = getBlock();
		for(int i = 0; i < b.getNumStmt(); i++)
			b.getStmt(i).Rewrite(stream);
		stream.popIndent();
		stream.println("}");

	}
	protected void FieldDecl.Rewrite(TypestateStream stream) {
		getModifiers().Rewrite(stream);
		getTypeAccess().Rewrite(stream);
		stream.print(" ");
		for(int i = 0; i < getNumDeclarator(); i++) {
			if (i != 0)
				stream.print(", ");
			getDeclarator(i).Rewrite(stream);
		}
		stream.println(";");
	}

	protected void InstanceInitializer.Rewrite(TypestateStream stream) {
		if(getBlock().getNumStmt() > 0)
			getBlock().Rewrite(stream);		//Deprecated
		else
			stream.println(";");
	}

	protected void StaticInitializer.Rewrite(TypestateStream stream) {
		if(getBlock().getNumStmt() > 0)
			getBlock().Rewrite(stream);		//Deprecated
		else
			stream.println(";");
	}

	protected void TypeDecl.Rewrite(TypestateStream stream) {}

	//Deprecated
	protected void InterfaceDecl.Rewrite(TypestateStream stream) {
		getModifiers().Rewrite(stream);
		stream.print("interface " + getID() + " ");
		if (getNumSuperInterface() > 0) {
			stream.print("extends ");
		}
		for(int i = 0; i < getNumSuperInterface(); i++) {
			if (i != 0)
				stream.print(", ");
			getSuperInterface(i).Rewrite(stream);
		}
		stream.println(" {");
		stream.pushIndent();

		for(int i = 0; i < getNumBodyDecl(); i++)
			getBodyDecl(i).Rewrite(stream);
		stream.popIndent();
		stream.println("}");
	}

	protected void ClassDecl.Rewrite(TypestateStream stream) {
		getModifiers().Rewrite(stream);
		stream.print("class " + getID() + " ");
		if (hasSuperClass()) {			//Deprecated
			stream.print("extends " );
			getSuperClass().Rewrite(stream);
			stream.print(" ");
		}
		if (getNumImplements() > 0) {			//Deprecated
			stream.print("implements ");
		}
		for(int i = 0; i < getNumImplements(); i++) {	//Deprecated
			if (i != 0)
				stream.print(", ");
			getImplements(i).Rewrite(stream);
		}

		stream.println(" {");
		stream.pushIndent();

		for(int i = 0; i < getNumBodyDecl(); i++)
			getBodyDecl(i).Rewrite(stream);
		stream.popIndent();
		stream.println("}");
	}

	protected void CompilationUnit.Rewrite(TypestateStream stream) {
		if(!getPackageDecl().equals(""))
			stream.println("package " + getPackageDecl() + ";");

		for(int i = 0; i < getNumImportDecl(); i++)
			getImportDecl(i).Rewrite(stream);

		//type().Rewrite(stream);
	}

	protected void Program.Rewrite(TypestateStream stream) {
		for(int i = 0; i < getNumCompilationUnit(); i++)
			getCompilationUnit(i).Rewrite(stream);
	}

	/************************************************************/
	/*                         Enum                             */
	/************************************************************/

	protected void EnumDecl.Rewrite(TypestateStream stream) {
		stream.println("enum " + getID() + " {");
		stream.pushIndent();
		for(int i = 0; i < getNumBodyDecl(); i++) {
			if(i != 0)
				stream.print(", ");
			getBodyDecl(i).Rewrite(stream);
		}

		stream.println(";");
		stream.popIndent();
		stream.println("}");
	}

	protected void EnumConstant.Rewrite(TypestateStream stream) {

		 stream.print(getID());
	}

	/************************************************************/
	/*                        Typestate                         */
	/************************************************************/

	protected void TypestateDecl.Rewrite(TypestateStream stream) {
		stream.println("typestate " + getID() + " {");
		stream.pushIndent();
		stream.println("session");
		stream.pushIndent();
		getInitState().Rewrite(stream);
		stream.popIndent();
		stream.println();
		if(getNumState() != 0)
			stream.println("where");
		stream.pushIndent();
		for (int i = 0; i < getNumState(); i++) {
			getState(i).Rewrite(stream);
		}
		stream.popIndent();
		stream.popIndent();
		stream.println();
		stream.println("}");
	}

	protected void State.Rewrite(TypestateStream stream) {
		stream.println();
		stream.print(getID() + " = ");
		stream.pushIndent();
		getTypestate().Rewrite(stream);
		stream.popIndent();
	}

	protected void Typestate.Rewrite(TypestateStream stream, boolean hasNewLine) {}

	protected void Typestate.Rewrite(TypestateStream stream) {
		Rewrite(stream, true);
	}

	protected void TypestateMethodList.Rewrite(TypestateStream stream, boolean hasNewLine) {
		if(hasNewLine) {
			stream.println();
			stream.println("{");
		}
		else
			stream.print("{");
		for (int i = 0; i < getNumTypestateMethod(); i++) {
			if(i != 0)
				if(hasNewLine)
					stream.println(", ");
				else
					stream.print(", ");
			getTypestateMethod(i).Rewrite(stream, hasNewLine);
		}
		if(hasNewLine)
			stream.println();
		stream.print("}");
	}

	protected void EndTypestate.Rewrite(TypestateStream stream, boolean hasNewLine) {
		stream.print("end");
	}

	protected void TypestateMethod.Rewrite(TypestateStream stream, boolean hasNewLine) {
		if(hasNewLine)
			stream.pushIndent();
		getTType().Rewrite(stream);
		stream.print(" " + getID());
		getTTypeList().Rewrite(stream);
		stream.print(": ");
		getTypestate().Rewrite(stream, hasNewLine);
		if(hasNewLine)
			stream.popIndent();
	}

	protected void TypestateSwitch.Rewrite(TypestateStream stream, boolean hasNewLine) {
		stream.print("<");
		for (int j = 0; j< getNumTypestateSwitchCase(); j++) {
			if (j != 0)
				stream.print(",");
			getTypestateSwitchCase(j).Rewrite(stream, hasNewLine);
		}
		stream.print(">");
	}

	protected void TypestateLabel.Rewrite(TypestateStream stream, boolean hasNewLine) {
		stream.print(getLabel());
	}

	protected void TypestateSwitchCase.Rewrite(TypestateStream stream) {
		stream.print(getLabel() + ": ");
		getTypestate().Rewrite(stream, true);
	}

	protected void TypestateSwitchCase.Rewrite(TypestateStream stream, boolean hasNewLine) {
		stream.print(getLabel() + ": ");
		getTypestate().Rewrite(stream, hasNewLine);
	}

	protected void TType.Rewrite(TypestateStream stream) {
		getAccess().Rewrite(stream);
	}

	protected void TTypestate.Rewrite(TypestateStream stream) {
		super.Rewrite(stream);
		stream.print(" <");
		getTypestate().Rewrite(stream, false);
		stream.print("> ");
	}

	protected void TTypeList.Rewrite(TypestateStream stream) {
		stream.print("()");
	}

	protected void TTypeArgs.Rewrite(TypestateStream stream) {
		stream.print("(");
		for (int i = 0; i < getNumTType(); i++) {
			if(i != 0)
				stream.print(", ");
			getTType(i).Rewrite(stream);

		}
		stream.print(")");
	}

	/************************************************************/
	/*                   Rewrite Methods                        */
	/************************************************************/

	protected void ASTNode.Rewrite(TypestateStream stream) {}

	protected void ASTNode.Rewrite(String path) {
		TypestateStream stream = null;
		try {
			stream = new TypestateStream(path);
		}
		catch(FileNotFoundException e) {
			System.err.println("Could not open file: " + path + " for writing");
			e.printStackTrace();
			System.exit(-1);
		}
		Rewrite(stream);
	}

	protected void ASTNode.Rewrite(PrintStream out) {
		TypestateStream stream = new TypestateStream(out);
		Rewrite(stream);
	}

	protected void ASTNode.Rewrite(String path, PrintStream out) {
		TypestateStream stream = null;
		try {
			stream = new TypestateStream(path, out);
		}
		catch(FileNotFoundException e) {
			System.err.println("Could not open file: " + path + " for writing");
			e.printStackTrace();
			System.exit(-1);
		}
		Rewrite(stream);
	}

	protected TypestateStream ASTNode.Rewrite() {
		TypestateStream stream = new TypestateStream();
		Rewrite(stream);
		return stream;
	}


	/************************************************************/
	/*                       toString()                         */
	/************************************************************/

	// One toString fits All
//	syn lazy String ASTNode.toString() {
//		return Rewrite().toString();
//	}
}
