aspect GetGraph{

  //Attributes for handling recursion using break, continue and labels
  eq Program.getChild().getTargetStmt() = null;
  eq Program.getChild().getTargetStmt(String label) = null;

  inh Stmt NTAFinallyBlock.getTargetStmt();
  inh Stmt NTAFinallyBlock.getTargetStmt(String label);

  inh Stmt ContinueStmt.getTargetStmt(String label);
  inh Stmt BreakStmt.getTargetStmt(String label);
  inh Stmt LabeledStmt.getTargetStmt(String label);

  eq LabeledStmt.getStmt().getTargetStmt(String label) = getLabel().equals(label) ? this : getTargetStmt(label);

  inh Stmt ContinueStmt.getTargetStmt();
  inh Stmt BreakStmt.getTargetStmt();
  eq WhileStmt.getStmt().getTargetStmt() = this;
  eq ForStmt.getStmt().getTargetStmt() = this;
  eq DoStmt.getStmt().getTargetStmt() = this;
  eq SwitchStmt.getBlock().getTargetStmt() = this;


  eq TryStmt.getBlock().getTargetStmt() = this;
  eq EnhancedForStmt.getStmt().getTargetStmt() = this;


  eq TypeDecl.getBodyDecl(int i).getTargetStmt(String label) = null;
  eq TypeDecl.getBodyDecl(int i).getTargetStmt() = null;

/*****************************************************************************************************/
  //TODO implement
  syn lazy TypestateVar Expr.getTypestateVar();

  //Not used
  eq Binary.getTypestateVar() = null;                                //Binary results in PrimitiveType
  eq Unary.getTypestateVar() = null;                                //Unary results in PrimitiveTypes
  eq Literal.getTypestateVar() = null;                            //Literals are also non typestate
  eq InstanceOfExpr.getTypestateVar() = null;                        //Boolean type
  eq ClassInstanceExpr.getTypestateVar() = null;                    //ClassInstanceoOfExpr should give null
  eq CastExpr.getTypestateVar() = getExpr().getTypestateVar();    //expect CastExpr not to have typestate type
  eq ArrayInit.getTypestateVar() = null;                            //Typestate types are not arrays
  eq ArrayCreationExpr.getTypestateVar() = null;                    //Typestate types are not arrays
  eq ParExpr.getTypestateVar() = getExpr().getTypestateVar();
  eq AssignExpr.getTypestateVar() = getDest().getTypestateVar();

  eq ConditionalExpr.getTypestateVar() = getCondition().isTrue() ? getTrueExpr().getTypestateVar()
                                          : getFalseExpr().getTypestateVar();

  eq ConstructorAccess.getTypestateVar() = null;
  eq TypeAccess.getTypestateVar() = null;                //Expected to be null
  eq ClassAccess.getTypestateVar() = null;

  eq Dot.getTypestateVar() = getRight().getTypestateVar();

  eq ThisAccess.getTypestateVar(){
      if(isAbstractDotParent())                //Qualified "this" is not supposed to be used as a right child of the Dot
          //because we do not have internal classes
          return null;
      return null;                        //TODO the case with code like Obj o = this; ??. Avoid this case ??
  }

  eq ArrayAccess.getTypestateVar() = null;            //Typestate types are not arrays
  eq MethodAccess.getTypestateVar()= type().isTypestateClassDeclType() ? getTarget().typestate : null;    //TODO is that it?
  eq SuperAccess.getTypestateVar() = null;

  eq PackageAccess.getTypestateVar() = null;

  eq ParseName.getTypestateVar() = null;

  eq VarAccess.getTypestateVar(){
      if(!type().isTypestateClassDeclType())
          return null;
      if(getQualifiedAccess() != null){
          return lookupTSVariable(getQualifiedType()).getTypestateVar();
        }
      if(lookupTSVariable() == null)
        return null;
      return lookupTSVariable().getTypestateVar();
  }


  //TODO this means that the caller object is this
  syn lazy TypestateVar Access.getQualifiedTypestateVar() = getQualifiedAccess() != null ?
      getQualifiedAccess().getLeft().getTypestateVar() : null;


//TODO:
  eq ParTypeAccess.getTypestateVar() = null;
  eq Wildcard.getTypestateVar() = null;
  eq WildcardExtends.getTypestateVar() = null;
  eq WildcardSuper.getTypestateVar() = null;
  eq DiamondAccess.getTypestateVar() = null;
  eq SyntheticTypeAccess.getTypestateVar() = null;
  eq ClassReference.getTypestateVar() = null;
  eq ArrayReference.getTypestateVar() = null;
  eq IntersectionCastExpr.getTypestateVar() = null;
  eq ExprMethodReference.getTypestateVar() = null;
  eq TypeMethodReference.getTypestateVar() = null;
  eq AmbiguousMethodReference.getTypestateVar() = null;
  eq LambdaExpr.getTypestateVar() = null;


/*****************************************************************************************************/

  syn lazy boolean MethodAccess.isThisAccess(){
      if(getQualifiedAccess() == null)
          return true;

      return getQualifiedAccess().getLeft().isThisAccess();
  }

/*****************************************************************************************************/

  protected TypestateVar Declarator.typestate = null;
  protected TypestateVar ParameterDeclaration.typestate = null;
  protected TypestateVar MethodDecl.typestate = new TypestateVar();    //TODO if it is a typestate method

  syn lazy Set<Declarator> ClassDecl.getTypestateFields(){
      Set<Declarator> s = new HashSet<Declarator>();
      for (BodyDecl decl : getBodyDeclList())
        if (decl instanceof FieldDecl){
             if(((FieldDecl) decl).getTypeAccess().lookupTSType().isTypestateClassDeclType())
               for(Declarator d : ((FieldDecl) decl).getDeclaratorList()){
                 s.add(d);
               }
              }
      return s;
  }

  syn lazy boolean ClassDecl.getGraph(){
      if(isTypestateClassDeclType()){
          TypestateClassDecl cd = (TypestateClassDecl) this;
          if(cd.existsTypestateDecl()){
              GraphNode r = cd.getTypestateDecl().createTypestate().normalise();
              TypestateVar.addTypestate = true; //TODO better implementation here
              getFieldGraph(r);

          for(ConstructorDecl c : getConstructorDecls()){
              c.getGraph();
            }

          if(getConstructorDecls().isEmpty()){
              for(Declarator vd : getTypestateFields()){
                  if(vd.getTypeAccess().lookupTSType().isTypestateClassDeclType()){
                      vd.typestate.checkError(vd);
                    }
                  }
                }
          }
      }

      TypestateVar.addTypestate = true; //TODO better implementation here
      for(MethodDecl md : getMethodDecls())
          if(md.isGraph() == false)
              md.getGraph();

      return true;
  }

  syn Set<TypestateVar> ClassDecl.getFieldGraph(GraphNode r){
      for(Declarator vd : getTypestateFields()){
          if(vd.typestate == null){
              vd.typestate = new TypestateField();
            }
      }

      getFieldGraph(r, new HashMap<GraphNode, Map<Declarator, GraphNode>>());
      Set<TypestateVar> env = new HashSet<TypestateVar>();

      for(Declarator vd : getTypestateFields())
          env.add(vd.typestate);

      return env;
  }

  syn boolean ClassDecl.getFieldGraph(GraphNode r, Map<GraphNode, Map<Declarator, GraphNode >> visited){
      //Check for recursion
      if(visited.get(r) != null){
          for(Declarator vd : getTypestateFields()){
              vd.typestate.current = visited.get(r).get(vd);
        }
      }else{
          Map<Declarator, GraphNode> s = new HashMap<Declarator, GraphNode>();
          visited.put(r,s);
          if(r instanceof EndNode){
              for(Declarator vd : getTypestateFields()){
                  vd.typestate.current = new EndNode();
            }
              return true;
          }

      for(Declarator vd : getTypestateFields()){
          s.put(vd, new LoopNode());
        }

      GraphNode[] tmp = new GraphNode[getTypestateFields().size()];

      int i = 0;
      for(Declarator vd : getTypestateFields()){
            tmp[i++] = vd.typestate.current;
        }

      for(GraphNode n : r.next){
          getFieldGraph(n, visited);
          i = 0;
          for(Declarator vd : getTypestateFields()){
              s.get(vd).addNext(vd.typestate.current);
              vd.typestate.current = tmp[i++];
            }

      }

      for(Declarator vd : getTypestateFields()){
          vd.typestate.current = s.get(vd);
        }

      }

      MethodDecl md = null;
      if(r.getId() != null && r.getParameters() != null)
          md = lookupTSMethod(r.getId(), r.getParameters());

      if(md != null){
          md.typestate.current = new ReturnNode();    //TODO if the return type is typestate type
          md.getGraph();
      }

//		visited.remove(r);
      return true;
  }

/*****************************************************************************************************/


  //TODO another file
  inh ClassDecl BodyDecl.getClassDeclAncestor();
  syn lazy Set<Declarator> BodyDecl.getTypestateFields() = getClassDeclAncestor().getTypestateFields();

  inh ClassDecl ConstructorDecl.getClassDeclAncestor();

  protected boolean BodyDecl.isGraph = false;
  protected boolean BodyDecl.isGraph(){
      return isGraph;
  }

  protected boolean BodyDecl.isRec = false;
  protected boolean BodyDecl.isRec(){
      return isRec;
  }

  protected int BodyDecl.checkGraphCounter = 0;
  protected int BodyDecl.getGraphCounter(){
      return checkGraphCounter;
  }

  syn boolean MethodDecl.getGraph(){
      isGraph = true;
      isRec = true;

          //TODO getGraph when needed. check for recursion
  //		for(MethodDecl md : selfSuccessors())
  //			if(md.isGraph() == false)
  //				md.getGraph();
      Set<TypestateVar> env = new HashSet<TypestateVar>();

      for(Declarator vd : getTypestateFields()){
          vd.typestate.resetConnectionGraph(this);
          env.add(vd.typestate);
      }
      for(int i = 0; i < getNumParameter(); i++){
          if(getParameter(i).getTypeAccess().lookupTSType().isTypestateClassDeclType()){
              if(getParameter(i).typestate == null){
                  getParameter(i).typestate = new TypestatePar();
  						}
          getParameter(i).typestate.resetConnectionGraph(null);
          env.add(getParameter(i).typestate);
          }
  			}

          //In the case where it is an abstract method

        if(getBlock() != null)
            getBlock().getGraph(env);

        for(int i = 0; i < getNumParameter(); i++){
            if(getParameter(i).getTypeAccess().lookupTSType().isTypestateClassDeclType()){
                getParameter(i).typestate.connectGraph(null);
                env.remove(getParameter(i).typestate);
            }
          }
        for(TypestateVar tv : env)
            tv.connectGraph(this);

        isRec = false;
        checkGraphCounter++;
        return true;
      }

  syn GraphNode MethodDecl.getParameterTypestate(int i){
      if(getParameter(i).typestate == null)
          getParameter(i).typestate = new TypestatePar();
      return getParameter(i).typestate.getConnectionGraph(null);
    }

/*****************************************************************************************************/

  coll Set<ConstructorDecl> ConstructorDecl.ConstructorSuccessors()[new HashSet<ConstructorDecl>()] with add root ConstructorDecl;

  ConstructorAccess contributes getTarget() when getTarget() != null to ConstructorDecl.ConstructorSuccessors() for getConstructorDeclAncestor();

  eq Program.getChild().getConstructorDeclAncestor() = null;
  inh ConstructorDecl ConstructorAccess.getConstructorDeclAncestor();
  eq ConstructorDecl.getParsedConstructorInvocation().getConstructorDeclAncestor() = this;
  eq Program.getCompilationUnit().getConstructorDeclAncestor() = null;

  syn boolean ConstructorDecl.getGraph(){
  	isGraph = true;
  	isRec = true;

  		for(ConstructorDecl c : ConstructorSuccessors())
  			if(c.isGraph() == false)
  				c.getGraph();

  	Set<TypestateVar> env = new HashSet<TypestateVar>();

  	for(Declarator vd : getTypestateFields()){
  				if(vd.typestate == null)
  					vd.typestate = new TypestateField(/*getMethods()*/);
  		vd.typestate.resetConnectionGraph(this);
  		env.add(vd.typestate);
  	}

  	for(int i = 0; i < getNumParameter(); i++){

  		if(getParameter(i).getTypeAccess().lookupTSType().isTypestateClassDeclType()){
  			if(getParameter(i).typestate == null)
  				getParameter(i).typestate = new TypestatePar();

  			getParameter(i).typestate.resetConnectionGraph(null);
  			env.add(getParameter(i).typestate);
  		}
    }
  	getBlock().getGraph(env);
  	if(hasConstructorInvocation())
  	getConstructorInvocation().getGraph(env);

  	for(int i = 0; i < getNumParameter(); i++){
  		if(getParameter(i).getTypeAccess().lookupTSType().isTypestateClassDeclType()){
  			getParameter(i).typestate.connectGraph(null);
  			env.remove(getParameter(i).typestate);
  		}
    }
  	for(TypestateVar tv : env)
  		tv.connectGraph(this);

  	for(Declarator vd : getTypestateFields()){
  		if(vd.getTypeAccess().lookupTSType().isTypestateClassDeclType()){
  			vd.typestate.checkError(vd);
      }
    }

  	isRec = false;
  	checkGraphCounter++;
  	return true;
  }

  syn GraphNode ConstructorDecl.getParameterTypestate(int i){
  	if(getParameter(i).typestate == null)
  		getParameter(i).typestate = new TypestatePar();
  	return getParameter(i).typestate.getConnectionGraph(null);
  }

/*****************************************************************************************************/

  syn boolean Stmt.getGraph(Set<TypestateVar> env);

  //TODO bug. Does not add variables declared in switch statements.
  eq Block.getGraph(Set<TypestateVar> env){
  	for(Declarator v : getVariableDecls()){
  		if(v.getTypeAccess().lookupTSType().isTypestateClassDeclType()){
  			if(v.typestate == null)
  				v.typestate = new TypestateVar();
  			env.add(v.typestate);
  		}
    }

  	for(int i = getNumStmt()-1; i >= 0; i--){
  		getStmt(i).getGraph(env);
    }

  	for(Declarator v : getVariableDecls()){
  		if(v.getTypeAccess().lookupTSType().isTypestateClassDeclType()){
  			v.typestate.checkError(v);
  			env.remove(v.typestate);
  		}
    }
  	return true;
  }

  //Not used stmts
  eq SynchronizedStmt.getGraph(Set<TypestateVar> env) = false;
  eq LocalClassDeclStmt.getGraph(Set<TypestateVar> env) = false;
  //TODO
  //eq BasicTWR.getGraph(Set<TypestateVar> env) = false;

  //No typestate stmts
  eq ConstCase.getGraph(Set<TypestateVar> env) = true;
  eq DefaultCase.getGraph(Set<TypestateVar> env) = true;
  eq EmptyStmt.getGraph(Set<TypestateVar> env) = true;

  eq TryStmt.getGraph(Set<TypestateVar> env){
    //TODO: catch clause: at least shouldn't be able to call a wrong method
  	for(int i = 0; i < getNumCatchClause(); i++){
      getCatchClause(i).getBlock().getGraph(env);
    }
    if(hasFinally())
  		getFinally().getGraph(env);

  	getBlock().getGraph(env);
  	return true;
  }

  //TODO throw
  eq ThrowStmt.getGraph(Set<TypestateVar> env) = true;

  eq AssertStmt.getGraph(Set<TypestateVar> env) = getCondition().getGraph(env);
  eq ExprStmt.getGraph(Set<TypestateVar> env) = getExpr().getGraph(env);

  eq LabeledStmt.getGraph(Set<TypestateVar> env){
  	for(TypestateVar v : env){
  		v.start.put(this,new LoopNode());
  		v.end.put(this,v.current);
  	}
  	getStmt().getGraph(env);
  	for(TypestateVar v : env){
  		GraphNode n = v.start.remove(this);
  		v.current = n.addNext(v.current);
  		v.end.remove(this);
  	}

  	return true;
  }

  eq ContinueStmt.getGraph(Set<TypestateVar> env){
  	Stmt target = getLabel().equals("") ? getTargetStmt() : getTargetStmt(getLabel());
  	for(TypestateVar v : env)
  		v.current = v.start.get(target);
  	return true;
  }

  eq BreakStmt.getGraph(Set<TypestateVar> env){
  	Stmt target = getLabel().equals("") ? getTargetStmt() : getTargetStmt(getLabel());
  	for(TypestateVar v : env)
  		v.current = v.end.get(target);
  	return true;
  }

  eq IfStmt.getGraph(Set<TypestateVar> env){
		for(TypestateVar v: env) {
			v.start.put(this, new LoopNode());
			v.end.put(this, v.current);
		}

		getThen().getGraph(env);

		for(TypestateVar v: env) {
			GraphNode s = v.start.get(this);
			s.addNext(v.current);
			v.current = v.end.remove(this);
		}

		if(hasElse())
			getElse().getGraph(env);

		for(TypestateVar v: env) {
			GraphNode s = v.start.remove(this);
			v.current = s.addNext(v.current);
		}

		getCondition().getGraph(env);

		return true;
  }

  eq WhileStmt.getGraph(Set<TypestateVar> env){
  	for(TypestateVar v : env){
  		GraphNode n = new LoopNode();
  		v.start.put(this,n);
  		v.current = new LoopNode().addNext(v.current).addNext(n);
  		v.end.put(this, v.current);
  	}

  	getStmt().getGraph(env);

  	for(TypestateVar v : env){
  		GraphNode n = new LoopNode();
  		n.addNext(v.current);
  		n.addNext(v.end.get(this));
  		v.current = n;
  	}

    getCondition().getGraph(env);

    for(TypestateVar v : env){
  	  GraphNode s = v.start.remove(this);
  	  v.current = s.addNext(v.current);
    }
    return true;
    }

eq DoStmt.getGraph(Set<TypestateVar> env){
	for(TypestateVar v : env){
		GraphNode n = new LoopNode();
		v.start.put(this, n);
		v.end.put(this, v.current);
		v.current = new LoopNode().addNext(v.current).addNext(n);
	}

	getCondition().getGraph(env);
  getStmt().getGraph(env);

  for(TypestateVar v : env){
	  GraphNode n = v.start.remove(this);
	  n.addNext(v.current);
	  v.current = n;
	  v.end.remove(this);
  }

  return true;
  }

  eq ForStmt.getGraph(Set<TypestateVar> env){
  	for(TypestateVar v : env){
  		GraphNode n = new LoopNode();
  		v.start.put(this, n);
  		v.end.put(this, v.current);
  		v.current = n;
  	}

  	for(int i = getNumUpdateStmt()-1; i >= 0; i--)
  		getUpdateStmt(i).getGraph(env);

  	getStmt().getGraph(env);

  	for(TypestateVar v : env)
  		v.current = new LoopNode().addNext(v.current).addNext(v.end.remove(this));

  	if(hasCondition())
  		getCondition().getGraph(env);

  	for(int i = getNumInitStmt()-1; i >= 0; i--)
  		getInitStmt(i).getGraph(env);


  	for(TypestateVar v : env)
  		v.current = v.start.remove(this).addNext(v.current);

  	return true;
  }

  //TODO: implement me
  eq EnhancedForStmt.getGraph(Set<TypestateVar> env) {
    for(TypestateVar v : env){
      GraphNode n = new LoopNode();
      v.start.put(this,n);
      v.current = new LoopNode().addNext(v.current).addNext(n);
      v.end.put(this, v.current);
    }

    getStmt().getGraph(env);

    for(TypestateVar v : env){
      GraphNode n = new LoopNode();
      n.addNext(v.current);
      n.addNext(v.end.get(this));
      v.current = n;
    }


    for(TypestateVar v : env){
      GraphNode s = v.start.remove(this);
      v.current = s.addNext(v.current);
    }
    return true;
  }


  eq SwitchStmt.getGraph(Set<TypestateVar> env){
  	Block b = getBlock();

  	TypestateVar t = null;
  	//TODO consider a link type for enumDecl variables
  	//TODO do we consider the case where qualified access is not a linear object -> I think yes
  	if(getExpr().isAccess()){
  		Access a = ((Access)getExpr()).getLastAccess();
  		if(a.type().isEnumDeclType())
  			t = a.getQualifiedAccess() != null ? a.getQualifiedTypestateVar() : null;
  	}

  	for(TypestateVar v : env){
  		if(t == null || !t.equals(v))
  			v.start.put(this,new LoopNode());
  		else
  			v.start.put(this,new SwitchNode(this));
  		v.end.put(this,v.current);
  	}
  	boolean c = false;
  	ArrayList<String> count = new ArrayList<String>();
  	ArrayList<Stmt> caseList = new ArrayList<Stmt>();

    for(int i = b.getNumStmt()-1; i >= 0; i--){
  	  if(b.getStmt(i) instanceof ConstCase){
  		  c = true;
  		  //TODO might not need the isAccess check and the else branch
  		  if(((ConstCase)b.getStmt(i)).getValue().isAccess())
  		  	count.add(((Access)((ConstCase)b.getStmt(i)).getValue()).getLastAccess().toString());
  		  else
  		  	count.add(((ConstCase)b.getStmt(i)).getValue().toString());
  		  caseList.add(b.getStmt(i));
  	  }else if(b.getStmt(i)instanceof DefaultCase){
			  c = true;
			  count.add("default");
			  caseList.add(b.getStmt(i));
			}else{
				if(c)
					for(TypestateVar v : env){
						if(t == null || !t.equals(v))
							v.start.get(this).addNext(v.current);
						else{
							for(int j = 0; j < count.size(); j++){
								SwitchCase sc=new SwitchCase(count.get(j),caseList.get(j), null);
								sc.addNext(v.current);
								v.start.get(this).addNext(sc);
							}
							count.clear();
							caseList.clear();
						}
					}

				c = false;
				b.getStmt(i).getGraph(env);
		  }
		}

  	if(c)
  		for(TypestateVar v : env){
  			if(t == null || !t.equals(v))
  				v.start.get(this).addNext(v.current);
  			else{
  				for(int j = 0; j < count.size(); j++){
  					SwitchCase sc = new SwitchCase(count.get(j), caseList.get(j), null);
  					sc.addNext(v.current);
  					v.start.get(this).addNext(sc);
  				}
  				count.clear();
  				caseList.clear();
  			}
  		}

  	for(TypestateVar v : env){
  		v.current = v.start.remove(this);
  		GraphNode e = v.end.remove(this);
  		if(!v.current.hasNext())
  			v.current.addNext(e);
  	}

  	getExpr().getGraph(env);

  	return true;
  	}

  //TODO another file
  inh MethodDecl Stmt.getMethodDeclAncestor();

  //TODO implement me
  //TODO What if a new Typestate Object is return, e.g. return new TypestateObject()
  eq ReturnStmt.getGraph(Set<TypestateVar> env){
  	if(!hasResult())
  		return true;

  	TypestateVar t = getResult().getTypestateVar();
  	if(t != null){
  		if(getMethodDeclAncestor().getTypeAccess().lookupTSType().isTypestateClassDeclType()){
  			t.checkError(getResult());
  			t.current = new ReturnPlug().addNext(getMethodDeclAncestor().typestate.current);
  		}
    }
  	getResult().getGraph(env);

  	return true;
  }

  eq VarDeclStmt.getGraph(Set<TypestateVar> env){
  	for(int i = getNumDeclarator() - 1; i >= 0; i--)
  		getDeclarator(i).getGraph(env);
  	return true;
  }

  //TODO implement me
  syn boolean Declarator.getGraph(Set<TypestateVar> env){
  	boolean isTypestate = getTypeAccess().lookupTSType().isTypestateClassDeclType();

  	if(isTypestate)
    	env.remove(typestate);

  	if(!hasInit())
  		return true;

  	TypestateVar t;
  	if(isTypestate){
  		if((getInit() instanceof ClassInstanceExpr) && (getInit().getTypestateVar() == null)){
  			typestate.current = new InitNode(getInit()).addNext(typestate.current);
  			typestate.addTypestate(getInit());
  		}else if((t = getInit().getTypestateVar()) != null){
  			t.checkError(getInit());
  			t.current = typestate.current;
  			//Typestate should be reset
  			typestate.resetCurrent();
  		}
  	}

    if((getInit() instanceof ClassInstanceExpr) &&
      ((ClassInstanceExpr) getInit()).getArg(0) instanceof ClassInstanceExpr){
        if(((ClassInstanceExpr)((ClassInstanceExpr) getInit()).getArg(0)).getAccess().lookupTSType().isTypestateClassDeclType()){
        typestate.current = new InitNode(((ClassInstanceExpr)((ClassInstanceExpr) getInit()).getArg(0))).addNext(typestate.current);
  			typestate.addTypestate(((ClassInstanceExpr)((ClassInstanceExpr) getInit()).getArg(0)));
      }else if((t = ((ClassInstanceExpr)((ClassInstanceExpr) getInit()).getArg(0)).getTypestateVar()) != null){
  			t.checkError(getInit());
  			t.current = typestate.current;
  			//Typestate should be reset
  			typestate.resetCurrent();
  		}
    }
  	getInit().getGraph(env);

  	return true;
  }

/********************************************************************************************/
  syn boolean Expr.getGraph(Set<TypestateVar> env);

  //Not used
  eq VarAccess.getGraph(Set<TypestateVar> env) = false;
  eq SuperAccess.getGraph(Set<TypestateVar> env) = false;
  eq PackageAccess.getGraph(Set<TypestateVar> env) = false;

//TODO implement me
  eq AssignExpr.getGraph(Set<TypestateVar> env){
    getDest().getGraph(env);
    TypestateVar d = getDest().getTypestateVar();
    TypestateVar s;
    Expr source;

    if(d != null){
      if(getSource() instanceof ConditionalExpr)
        if(((ConditionalExpr)getSource()).getCondition().isTrue())
          source = ((ConditionalExpr)getSource()).getTrueExpr();
        else
          source = ((ConditionalExpr)getSource()).getFalseExpr();
      else
        source = getSource();

      if(source instanceof ClassInstanceExpr){
        d.current = new InitNode(source).addNext(d.current);
        d.addTypestate(source);
      }
      else if((s = source.getTypestateVar()) != null){
  	    s.checkError(source);
  	    s.current = d.current;
  	    d.resetCurrent();
      }
      //Assign a typestate variable with a null
      if(source.type().isNull() && !(d.current instanceof EndNode)){
        d.checkError(source);
        d.resetCurrent();
      }
    }
    getSource().getGraph(env);
    return true;
  }

  eq Literal.getGraph(Set<TypestateVar> env) = false;

  eq Binary.getGraph(Set<TypestateVar> env){
  	getRightOperand().getGraph(env);
  	getLeftOperand().getGraph(env);
  	return true;
  }

  eq LogicalExpr.getGraph(Set<TypestateVar> env){
  	for(TypestateVar v : env)
  		v.end.put(this, v.current);

  	getRightOperand().getGraph(env);

  	for(TypestateVar v : env)
  		v.current = new LoopNode().addNext(v.current).addNext(v.end.remove(this));

  	getLeftOperand().getGraph(env);

  	return true;
  }

  eq ParExpr.getGraph(Set<TypestateVar> env) = getExpr().getGraph(env);

  eq ConditionalExpr.getGraph(Set<TypestateVar> env){
  	for(TypestateVar v : env)
  		v.end.put(this, v.current);

  	getTrueExpr().getGraph(env);

  	for(TypestateVar v : env){
  		v.start.put(this,new LoopNode().addNext(v.current));
  		v.current = v.end.remove(this);
  	}

  	getFalseExpr().getGraph(env);

  	for(TypestateVar v : env)
  		v.current = v.start.remove(this).addNext(v.current);

  	getCondition().getGraph(env);

  	return true;
  }

  eq InstanceOfExpr.getGraph(Set<TypestateVar> env) = getExpr().getGraph(env);

  eq CastExpr.getGraph(Set<TypestateVar> env) = getExpr().getGraph(env);
  eq Unary.getGraph(Set<TypestateVar> env) = getOperand().getGraph(env);

  eq ArrayInit.getGraph(Set<TypestateVar> env){
  	for(int i = getNumInit()-1; i >= 0; i--)
  		getInit(i).getGraph(env);
  	return true;
  }

  eq ArrayCreationExpr.getGraph(Set<TypestateVar> env){
  	if(hasArrayInit())
  		getArrayInit().getGraph(env);
  	return true;
  }

  eq ParseName.getGraph(Set<TypestateVar> env) = true;
  eq Access.getGraph(Set<TypestateVar> env) = true;
  eq ThisAccess.getGraph(Set<TypestateVar> env) = true;
  eq TypeAccess.getGraph(Set<TypestateVar> env) = true;
  eq ClassAccess.getGraph(Set<TypestateVar> env) = true;
  //Used when array access is qualified
  eq ArrayAccess.getGraph(Set<TypestateVar> env) = getExpr().getGraph(env);
  eq ArrayTypeAccess.getGraph(Set<TypestateVar> env) = getAccess().getGraph(env);
  eq ArrayTypeWithSizeAccess.getGraph(Set<TypestateVar> env){
  	getAccess().getGraph(env);
  	getExpr().getGraph(env);
  	return true;
  }

  eq Dot.getGraph(Set<TypestateVar> env){
  	getRight().getGraph(env);
  	getLeft().getGraph(env);
  	return true;
  }

  //TODO another file
  syn lazy Set<Declarator> ConstructorAccess.getTypestateFields() = getClassDeclAncestor().getTypestateFields();

  //TODO Fix the this call
  //TODO can you have recursive constructor call? If yes -> put a recursion clause
  eq ConstructorAccess.getGraph(Set<TypestateVar> env){
  	ConstructorDecl cd = getTarget();
  	if(cd != null){
  		GraphNode[]parameters = new GraphNode[cd.getNumParameter()];
  		for(int i = cd.getNumParameter()-1; i >= 0; i--)
  			if(cd.getParameter(i).typestate != null)
  				parameters[i] = cd.getParameterTypestate(i);

  		cd.getGraph();
  		for(Declarator vd : getTypestateFields())
  			vd.typestate.current = vd.typestate.getConnectionGraph(cd);

  		for(int i = cd.getNumParameter()-1; i >= 0; i--){
  			TypestateVar dest = cd.getParameter(i).typestate;
  			TypestateVar source;

  			if(dest != null){
  				if(getArg(i)instanceof ClassInstanceExpr){
  					dest.current = new InitNode(getArg(i)).addNext(parameters[i]);
  					dest.addTypestate(getArg(i));
  				}else if((source = getArg(i).getTypestateVar()) != null){
  				source.checkError(getArg(i));
  				source.current = parameters[i];
  				}
  			}
  		}
  	}

  	for(int i = getNumArg()-1; i >= 0; i--){
  		getArg(i).getGraph(env);
    }
  	return true;
  }

  eq MethodAccess.getGraph(Set<TypestateVar> env){
  	MethodDecl md = getTarget();
  	if(md != null){
      // This is to add delays when found in another method call
      Set<Delay> delays = md.getDelays();
      if(!delays.isEmpty()){
        for (Delay dl : delays){
          // System.out.println(dl.toString());
          dl.getGraph(env);
        }
      }


  		GraphNode[] parameters = new GraphNode[md.getNumParameter()];

  	if(isThisAccess()){
  		if(md.isRec() == true){                                //Condition checks for recursion
  			for(int i = md.getNumParameter()-1; i >= 0; i--)
  				if(md.getParameter(i).typestate != null)
  					parameters[i] = md.getParameterTypestate(i);

  	//Plugs the fields
  		for(Declarator vd : getTypestateFields())
  			vd.typestate.getPlugGraph(md).addNext(vd.typestate.current);

  		for(Declarator vd : getTypestateFields())
  			vd.typestate.current = vd.typestate.getConnectionGraph(md);

  	//TODO check if you can infer recursive typestate
  	//md.typestate.current = md.typestate.current.clonePlugGraph();

  	//TODO better implementation here
  		Boolean sessionParameter = false;
  		for(int i = md.getNumParameter()-1; i >= 0; i--)
  			if(md.getParameter(i).typestate != null){
  				sessionParameter = true;
  				break;
  			}

      if(md.getTypeAccess().lookupTSType().isTypestateClassDeclType() || sessionParameter == true)
  			md.addSemanticError("Cannot infer return type for recursive method call.");
  		}else{
  				md.getGraph();
  				for(int i = md.getNumParameter()-1; i>= 0; i--)
    			   if(md.getParameter(i).typestate != null)
    				    parameters[i] = md.getParameterTypestate(i);

  				for(Declarator vd : getTypestateFields())
  				   vd.typestate.current = vd.typestate.getConnectionGraph(md);
  			}
  	}else if(getQualifiedType().isTypestateClassDeclType()){
  		TypestateVar t = getQualifiedTypestateVar();

  		Boolean sessionParameter = false;
  		for(int i = md.getNumParameter()-1; i >= 0; i--){
  			if(md.getParameter(i).getTypeAccess().lookupTSType().isTypestateClassDeclType()){
  				sessionParameter = true;
  				break;
  			}
  		}

  		//when md is in the typestate methods
  		//				if(md.isTypestateMethod()) {
  		//when the target of the MethodAccess is in the typestate methods
  		if(isTypestateMethod()){
  			if(md.getTypeAccess().lookupTSType().isTypestateClassDeclType() || sessionParameter == true){
  				ClassDecl c = ((ClassDecl) getQualifiedType());
  				GraphNode tmp = md.typestate.current;
  				boolean addTypestate = TypestateVar.addTypestate;    //TODO better implementation here
  				TypestateVar.addTypestate = true;            //TODO better implementation here
  				Set<TypestateVar> typestateEnvironment = c.getFieldGraph(t.current);
  				TypestateVar.addTypestate = addTypestate;        //TODO better implementation here

  				md.typestate.current = tmp;
  				md.getGraph();

  				// check if return is consistent.
  				for(TypestateVar vdt : typestateEnvironment)
  					if(vdt.current.isReturnPlugged())
  						md.addSemanticError("Cannot infer return type for method call.");
  			}

  			if(t != null){
  				t.current = new MethodNode(lookupTSMethod(getQualifiedType()).getTypeAccess(),
            getID(), getParameterTypes(), this).addNext(t.current);
  			}
  		} 

  		for(int i = md.getNumParameter()-1; i >= 0; i--)
  			if(md.getParameter(i).typestate != null)
  				parameters[i] = md.getParameterTypestate(i);
  	}
  	else{
  		//TODO there is something reduntand or missing here
  		if(md.getTypeAccess().lookupTSType().isTypestateClassDeclType()){
  			md.getGraph();
  		}
  	}

  	for(int i = md.getNumParameter()-1; i >= 0; i--){
  		TypestateVar dest = md.getParameter(i).typestate;
  		TypestateVar source;
  		if(dest != null){
  			if(getArg(i) instanceof ClassInstanceExpr){
  				dest.current = new InitNode(getArg(i)).addNext(parameters[i]);
  				dest.addTypestate(getArg(i));
  			}else if((source = getArg(i).getTypestateVar()) != null){
  				source.checkError(getArg(i));
  				source.current = parameters[i];
  			}
  		}
  	}
  	md.typestate.current = new EndNode();
  	}

  	for(int i = getNumArg()-1; i >= 0; i--)
  		getArg(i).getGraph(env);

  	return true;
  }

  eq ClassInstanceExpr.getGraph(Set<TypestateVar> env) = true;

  //TODO
  eq ParTypeAccess.getGraph(Set<TypestateVar> env) = true;
  eq Wildcard.getGraph(Set<TypestateVar> env) = true;
  eq WildcardExtends.getGraph(Set<TypestateVar> env) = true;
  eq WildcardSuper.getGraph(Set<TypestateVar> env) = true;

  eq DiamondAccess.getGraph(Set<TypestateVar> env) = true;
  eq SyntheticTypeAccess.getGraph(Set<TypestateVar> env) = true;
  eq ClassReference.getGraph(Set<TypestateVar> env) = true;
  eq ArrayReference.getGraph(Set<TypestateVar> env) = true;
  eq IntersectionCastExpr.getGraph(Set<TypestateVar> env) = true;
  eq ExprMethodReference.getGraph(Set<TypestateVar> env) = true;
  eq TypeMethodReference.getGraph(Set<TypestateVar> env) = true;
  eq AmbiguousMethodReference.getGraph(Set<TypestateVar> env) = true;
  eq LambdaExpr.getGraph(Set<TypestateVar> env) = true;

}
