goal			::=	compilation_unit
			;
      
literal			::=	INTEGER_LITERAL
			|	LONG_LITERAL
			|	FLOATING_POINT_LITERAL
			|	DOUBLE_LITERAL
			|	BOOLEAN_LITERAL
			|	CHARACTER_LITERAL
			|	STRING_LITERAL
			|	NULL_LITERAL
 			;

type			::=	primitive_type
			|	reference_type
			;

primitive_type		::=	numeric_type
			|	BOOLEAN
			;

numeric_type		::=	integral_type
			|	floating_point_type
			;

integral_type		::=	BYTE
			|	SHORT
			|	INT
			|	LONG
			|	CHAR
			;

floating_point_type	::=	FLOAT
			|	DOUBLE
			;

reference_type		::=	class_or_interface_type
			|	array_type
			;

class_or_interface_type	::=	name
			;

class_type		::=	class_or_interface_type
			;

interface_type		::=	class_or_interface_type
			;

array_type		::=	primitive_type dims
			|	name dims
			;

name			::=	simple_name
			|	qualified_name
			;

simple_name		::=	IDENTIFIER
  			;

qualified_name		::=	name DOT simple_name
			;

compilation_unit	::=	package_declaration import_declarations? type_declaration
			|	import_declarations? type_declaration
			;

import_declarations	::=	import_declaration
			|	import_declarations import_declaration

			;

package_declaration	::=	PACKAGE name_decl SEMICOLON
			;

name_decl		::=	simple_name_decl
			|	qualified_name_decl
			;

simple_name_decl	::=	IDENTIFIER
			;

qualified_name_decl	::=	name_decl DOT IDENTIFIER
			;

import_declaration	::=	single_type_import_declaration
			|	type_import_on_demand_declaration
			;

single_type_import_declaration
			::=	IMPORT name SEMICOLON
			;

type_import_on_demand_declaration
			::=	IMPORT name DOT MULT SEMICOLON
			;

type_declaration	::=	class_declaration
			;


modifiers		::=	modifier
			|	modifiers modifier
			;

modifier		::=	PUBLIC
			|	PROTECTED
			|	PRIVATE
			|	STATIC
			|	FINAL
			;

class_declaration	::=	modifiers? CLASS IDENTIFIER interfaces? class_body
			|	modifiers? CLASS IDENTIFIER interfaces? typestate_type class_body
			;

interfaces		::=	IMPLEMENTS interface_type_list
			;

interface_type_list	::=	interface_type
			|	interface_type_list COMMA interface_type
			;

typestate_type		::=	TYPESTATE simple_name
			;

class_body		::=	LBRACE class_body_declarations? RBRACE
			;

class_body_declarations	::=	class_body_declaration
			|	class_body_declarations class_body_declaration
			;

class_body_declaration	::=	class_member_declaration
			|	constructor_declaration
			;

class_member_declaration
			::=	field_declaration
			|	method_declaration
			|	SEMICOLON
			;

field_declaration	::=	modifiers? type variable_declarators SEMICOLON
			;

variable_declarators	::=	variable_declarator
			|	variable_declarators COMMA variable_declarator
			;

variable_declarator
			::=	variable_declarator_id
			|	variable_declarator_id EQ variable_initializer
			;

variable_declarator_id
			::=	IDENTIFIER dims?
			;

variable_initializer	::=	expression
			|	array_initializer
			;

MethodDecl method_declaration
			::=	method_header method_body
			;
      
MethodDecl method_header
			::=	modifiers? type IDENTIFIER LPAREN formal_parameter_list? RPAREN dims? throws?
			|	modifiers? VOID IDENTIFIER LPAREN formal_parameter_list? RPAREN throws?
			;
                                                                
formal_parameter_list	::=	formal_parameter
			|	formal_parameter_list COMMA formal_parameter
			;

formal_parameter	::=	modifiers? type IDENTIFIER dims?
			;

throws			::=	THROWS class_type_list
			;

class_type_list		::=	class_type
			|	class_type_list COMMA class_type
			;

method_body		::=	block
			|	SEMICOLON
			;

constructor_declaration
			::=	modifiers? IDENTIFIER LPAREN formal_parameter_list? RPAREN throws? 
			|	LBRACE explicit_constructor_invocation? block_statements? RBRACE
			;

explicit_constructor_invocation
			::=	THIS LPAREN argument_list? RPAREN SEMICOLON
			;

array_initializer	::=	LBRACE variable_initializers? COMMA? RBRACE
			;

variable_initializers	::=	variable_initializer
			|	variable_initializers COMMA variable_initializer
			;

block			::=	LBRACE block_statements? RBRACE
			;

block_statements		::=	block_statement
			|	block_statements block_statement
			;

block_statement		::=	local_variable_declaration_statement
			|	statement
			;

local_variable_declaration_statement
			::=	local_variable_declaration SEMICOLON
			;

local_variable_declaration
			::=	modifiers? type variable_declarators

			;

statement		::=	statement_without_trailing_substatement
			|	labeled_statement
			|	if_then_statement
			|	if_then_else_statement
			|	while_statement
			|	for_statement
			;

statement_without_trailing_substatement
			::=	block
			|	empty_statement
			|	expression_statement
			|	switch_statement
			|	do_statement
			|	break_statement
			|	continue_statement
			|	return_statement
			|	throw_statement
			|	try_statement
			|	assert_statement
			;

statement_no_short_if	::=	statement_without_trailing_substatement
			|	labeled_statement_no_short_if
			|	if_then_else_statement_no_short_if
			|	while_statement_no_short_if
			|	for_statement_no_short_if
			;

if_then_statement	::=	IF LPAREN expression RPAREN statement
			;

if_then_else_statement	::=	IF LPAREN expression RPAREN statement_no_short_if ELSE statement
			;

if_then_else_statement_no_short_if
			::=	IF LPAREN expression RPAREN statement_no_short_if ELSE statement_no_short_if
			;

empty_statement	::=	SEMICOLON
			;

labeled_statement	::=	IDENTIFIER COLON statement
			;

labeled_statement_no_short_if
			::=	IDENTIFIER COLON statement_no_short_if
			;

expression_statement	::=	statement_expression SEMICOLON
			;

statement_expression	::=	assignment
			|	preincrement_expression
			|	predecrement_expression
			|	postincrement_expression
			|	postdecrement_expression
			|	method_invocation
			|	class_instance_creation_expression
			;

switch_statement	::=	SWITCH LPAREN expression RPAREN switch_block
			;

switch_block		::=	LBRACE switch_block_statement_groups switch_labels RBRACE 
			|	LBRACE switch_block_statement_groups RBRACE
			|	LBRACE switch_labels RBRACE
			|	LBRACE RBRACE
			;

switch_block_statement_groups
			::=	switch_block_statement_group
			|	switch_block_statement_groups switch_block_statement_group
			;

switch_block_statement_group
			::=	switch_labels block_statements
			;

switch_labels		::=	switch_label
			|	switch_labels switch_label
			;

switch_label		::=	CASE constant_expression COLON
			|	DEFAULT COLON
			;

while_statement	::=	WHILE LPAREN expression RPAREN statement
			;

while_statement_no_short_if
			::=	WHILE LPAREN expression RPAREN statement_no_short_if
			;

do_statement		::=	DO statement WHILE LPAREN expression RPAREN SEMICOLON
			;

for_statement		::=	FOR LPAREN for_init? SEMICOLON expression? SEMICOLON for_update? RPAREN statement
			;

for_statement_no_short_if
			::=	FOR LPAREN for_init? SEMICOLON expression? SEMICOLON for_update? RPAREN statement_no_short_if
			;

for_init		::=	statement_expression_list
			|	local_variable_declaration
			;

for_update		::=	statement_expression_list
			;

statement_expression_list
			::=	statement_expression
			|	statement_expression_list COMMA statement_expression
			;

break_statement		::=	BREAK IDENTIFIER SEMICOLON
			|	BREAK SEMICOLON
			;

continue_statement	::=	CONTINUE IDENTIFIER SEMICOLON
			|	CONTINUE SEMICOLON
			;

return_statement	::=	RETURN expression? SEMICOLON
			;

throw_statement		::=	THROW expression SEMICOLON
			;

try_statement		::=	TRY block catches
			|	TRY block finally
			|	TRY block catches finally
			;

catches			::=	catch_clause
			|	catches catch_clause
			;

catch_clause		::=	CATCH LPAREN formal_parameter RPAREN block
			;

finally			::=	FINALLY block
			;

assert_statement	::=	ASSERT expression SEMICOLON
			|	ASSERT expression COLON expression SEMICOLON
			;

primary			::=	primary_no_new_array
			|	array_creation_init
			|	array_creation_uninit
			;

class_literal		:=	CLASS
			;

primary_no_new_array	::=	literal
			|	primitive_type dims? DOT class_literal
			|	name dims? DOT class_literal
			|	VOID DOT class_literal
			|	THIS
			|	name DOT THIS
			|	LPAREN expression RPAREN
			|	LPAREN name RPAREN
			|	class_instance_creation_expression
			|	field_access
			|	method_invocation
			|	array_access
			;

class_instance_creation_expression
			::=	NEW class_or_interface_type LPAREN argument_list? RPAREN 
			|	primary DOT NEW simple_name LPAREN argument_list? RPAREN
			|	name DOT NEW simple_name LPAREN argument_list? RPAREN

argument_list		::=	expression
			|	argument_list COMMA expression
  			;

array_creation_uninit	::=	NEW primitive_type dim_exprs
			|	NEW primitive_type dim_exprs dims
			|	NEW class_or_interface_type.t dim_exprs.d 
			|	NEW class_or_interface_type dim_exprs dims
			;

array_creation_init	::=	NEW primitive_type dims array_initializer
			|	NEW class_or_interface_type dims array_initializer
			;

dim_exprs		::=	dim_expr
			|	dim_exprs dim_expr
			;

dim_expr		::=	LBRACK expression RBRACK
			;

dims			::=	LBRACK RBRACK
			|	dims LBRACK RBRACK
			;

field_access		::=	primary DOT simple_name
			;

method_invocation	::=	name LPAREN argument_list? RPAREN
			|	primary DOT IDENTIFIER LPAREN argument_list? RPAREN 
			;

array_access		::=	name LBRACK expression RBRACK
			|	primary_no_new_array LBRACK expression RBRACK
			;

postfix_expression	::=	primary
			|	name
			|	postincrement_expression
			|	postdecrement_expression
  			;

postincrement_expression
			::=	postfix_expression PLUSPLUS
			;

postdecrement_expression	
			::=	postfix_expression MINUSMINUS
			;

unary_expression		
			::=	preincrement_expression
			|	predecrement_expression
			|	PLUS unary_expression
			|	MINUS unary_expression
			|	unary_expression_not_plus_minus
			;

preincrement_expression	::=	PLUSPLUS unary_expression
			;

predecrement_expression	::=	MINUSMINUS unary_expression
			;

unary_expression_not_plus_minus
			::=	postfix_expression
			|	COMP unary_expression
			|	NOT unary_expression
			|	cast_expression
			;

cast_expression		::=	LPAREN primitive_type dims? RPAREN unary_expression
			|	LPAREN name dims? RPAREN unary_expression_not_plus_minus
			;

multiplicative_expression
			::=	unary_expression
			|	multiplicative_expression MULT unary_expression
			|	multiplicative_expression DIV unary_expression
			|	multiplicative_expression MOD unary_expression
			;

additive_expression	::=	multiplicative_expression
			|	additive_expression PLUS multiplicative_expression
			|	additive_expression MINUS multiplicative_expression
			;

shift_expression	::=	additive_expression
			|	shift_expression LSHIFT additive_expression
			|	shift_expression RSHIFT additive_expression
			|	shift_expression URSHIFT additive_expression
			;

relational_expression	::=	shift_expression
			|	relational_expression LT shift_expression
			|	relational_expression GT shift_expression
			|	relational_expression LTEQ shift_expression
			|	relational_expression GTEQ shift_expression
			|	relational_expression INSTANCEOF reference_type
			;

equality_expression	::=	relational_expression
			|	equality_expression EQEQ relational_expression
			|	equality_expression NOTEQ relational_expression
			;

and_expression		::=	equality_expression
			|	and_expression AND equality_expression
			;

exclusive_or_expression	::=	and_expression
			|	exclusive_or_expression XOR and_expression
			;

inclusive_or_expression	::=	exclusive_or_expression
			|	inclusive_or_expression OR exclusive_or_expression
			;

conditional_and_expression
			::=	inclusive_or_expression
			|	conditional_and_expression ANDAND inclusive_or_expression
			;

conditional_or_expression
			::=	conditional_and_expression
			|	conditional_or_expression OROR conditional_and_expression
			;

conditional_expression	::=	conditional_or_expression
			|	conditional_or_expression QUESTION expression COLON conditional_expression
			;

assignment_expression	::=	conditional_expression
			|	assignment
			;

assignment		::=	postfix_expression EQ assignment_expression
			|	postfix_expression MULTEQ assignment_expression
			|	postfix_expression DIVEQ assignment_expression
			|	postfix_expression MODEQ assignment_expression
			|	postfix_expression PLUSEQ assignment_expression
			|	postfix_expression MINUSEQ assignment_expression
			|	postfix_expression LSHIFTEQ assignment_expression
			|	postfix_expression RSHIFTEQ assignment_expression
			|	postfix_expression URSHIFTEQ assignment_expression
			|	postfix_expression ANDEQ assignment_expression
			|	postfix_expression XOREQ assignment_expression
			|	postfix_expression OREQ assignment_expression
			;

expression		::=	assignment_expression
			;

constant_expression	::=	expression
			;

